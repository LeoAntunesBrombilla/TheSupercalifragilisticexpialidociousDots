FUNCTION  coc#client#get_channel()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/client.vim:141
Called 1013 times
Total time:   0.007829
 Self time:   0.007829

count  total (s)   self (s)
 1013              0.002894   if s:is_vim
 1013              0.003232     return a:client['channel']
                              endif
                              return a:client['chan_id']

FUNCTION  <SNR>50_DevIconsGetArtifactFix()
    Defined: ~/.vim/plugged/vim-devicons/plugin/webdevicons.vim:542
Called 96 times
Total time:   0.001398
 Self time:   0.001398

count  total (s)   self (s)
   96              0.000287   if g:DevIconsAppendArtifactFix == 1
                                let artifactFix = g:DevIconsArtifactFixChar
   96              0.000093   else
   96              0.000218     let artifactFix = ''
   96              0.000093   endif
                            
   96              0.000231   return artifactFix

FUNCTION  airline#extensions#coc#get_error()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim:14
Called 398 times
Total time:   0.017947
 Self time:   0.004225

count  total (s)   self (s)
  398   0.017639   0.003917   return airline#extensions#coc#get('error')

FUNCTION  <SNR>90_check_mixed_indent()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim:17
Called 2 times
Total time:   0.008671
 Self time:   0.008671

count  total (s)   self (s)
    2              0.000012   let indent_algo = get(g:, 'airline#extensions#whitespace#mixed_indent_algo', 0)
    2              0.000004   if indent_algo == 1
                                " [<tab>]<space><tab>
                                " spaces before or between tabs are not allowed
                                let t_s_t = '(^\t* +\t\s*\S)'
                                " <tab>(<space> x count)
                                " count of spaces at the end of tabs should be less than tabstop value
                                let t_l_s = '(^\t+ {' . &ts . ',}' . '\S)'
                                return search('\v' . t_s_t . '|' . t_l_s, 'nw')
    2              0.000004   elseif indent_algo == 2
                                return search('\v(^\t* +\t\s*\S)', 'nw', 0, 500)
    2              0.000002   else
    2              0.008619     return search('\v(^\t+ +)|(^ +\t+)', 'nw', 0, 500)
                              endif

FUNCTION  airline#statusline()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline.vim:190
Called 398 times
Total time:   0.015241
 Self time:   0.015241

count  total (s)   self (s)
  398              0.007997   if has_key(s:contexts, a:winnr)
  398              0.005590     return '%{airline#check_mode('.a:winnr.')}'.s:contexts[a:winnr].line
                              endif
                              " in rare circumstances this happens...see #276
                              return ''

FUNCTION  airline#check_mode()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline.vim:199
Called 398 times
Total time:   0.419355
 Self time:   0.077957

count  total (s)   self (s)
  398              0.002469   if !has_key(s:contexts, a:winnr)
                                return ''
  398              0.000822   endif
  398              0.002266   let context = s:contexts[a:winnr]
                            
  398              0.002361   if get(w:, 'airline_active', 1)
  398              0.002210     let l:m = mode(1)
  398              0.001308     if l:m ==# "i"
  270              0.001159       let l:mode = ['insert']
  128              0.000516     elseif l:m[0] ==# "i"
   82              0.000262       let l:mode = ['insert']
   46              0.000093     elseif l:m ==# "Rv"
                                  let l:mode =['replace']
   46              0.000121     elseif l:m[0] ==# "R"
                                  let l:mode = ['replace']
   46              0.000600     elseif l:m[0] =~# '\v(v|V||s|S|)'
    8              0.000032       let l:mode = ['visual']
   38              0.000066     elseif l:m ==# "t"
                                  let l:mode = ['terminal']
   38              0.000087     elseif l:m[0] ==# "c"
                                  let l:mode = ['commandline']
   38              0.000072     elseif l:m ==# "no"   " does not work, most likely, Vim does not refresh the statusline in OP mode
                                  let l:mode = ['normal']
   38              0.000120     elseif l:m[0:1] ==# 'ni'
                                  let l:mode = ['insert']
                                  let l:m = 'ni'
   38              0.000148     else
   38              0.000180       let l:mode = ['normal']
  398              0.000455     endif
  398              0.002953     if exists("*VMInfos") && !empty(VMInfos())
                                  " Vim plugin Multiple Cursors https://github.com/mg979/vim-visual-multi
                                  let l:m = 'multi'
  398              0.000390     endif
  398              0.003530     if index(['Rv', 'no', 'ni', 'ix', 'ic', 'multi'], l:m) == -1
  316              0.001416       let l:m = l:m[0]
  398              0.000414     endif
  398              0.003205     let w:airline_current_mode = get(g:airline_mode_map, l:m, l:m)
                              else
                                let l:mode = ['inactive']
                                let w:airline_current_mode = get(g:airline_mode_map, '__')
  398              0.000416   endif
                            
  398              0.002454   if g:airline_detect_modified && &modified
  373              0.002531     call add(l:mode, 'modified')
  398              0.000666   endif
                            
  398              0.001137   if g:airline_detect_paste && &paste
                                call add(l:mode, 'paste')
  398              0.000388   endif
                            
  398              0.002462   if g:airline_detect_crypt && exists("+key") && !empty(&key)
                                call add(l:mode, 'crypt')
  398              0.000400   endif
                            
  398              0.001446   if g:airline_detect_spell && &spell
                                call add(l:mode, 'spell')
  398              0.000364   endif
                            
  398              0.001134   if &readonly || ! &modifiable
                                call add(l:mode, 'readonly')
  398              0.000371   endif
                            
  398              0.002495   let mode_string = join(l:mode)
  398              0.002532   if get(w:, 'airline_lastmode', '') != mode_string
   18   0.000996   0.000322     call airline#highlighter#highlight_modified_inactive(context.bufnr)
   18   0.339697   0.000378     call airline#highlighter#highlight(l:mode, context.bufnr)
   18   0.001770   0.000365     call airline#util#doautocmd('AirlineModeChanged')
   18              0.000050     let w:airline_lastmode = mode_string
  398              0.000380   endif
                            
  398              0.000633   return ''

FUNCTION  <SNR>53_on_cursor_moved()
    Defined: ~/.vim/plugged/vim-airline/plugin/airline.vim:83
Called 21 times
Total time:   0.002588
 Self time:   0.002243

count  total (s)   self (s)
   21              0.000293   if winnr() != s:active_winnr || !exists('w:airline_active')
                                call s:on_window_changed('CursorMoved')
   21              0.000039   endif
   21   0.001966   0.001621   call airline#update_tabline()

FUNCTION  airline#util#append()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:49
Called 2786 times
Total time:   0.042120
 Self time:   0.042120

count  total (s)   self (s)
 2786              0.009191   if a:minwidth > 0 && airline#util#winwidth() < a:minwidth
                                return ''
 2786              0.002618   endif
 2786              0.012912   let prefix = s:spc == "\ua0" ? s:spc : s:spc.s:spc
 2786              0.011137   return empty(a:text) ? '' : prefix.g:airline_left_alt_sep.s:spc.a:text

FUNCTION  <SNR>86_exec_separator()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:183
Called 203 times
Total time:   0.129811
 Self time:   0.010749

count  total (s)   self (s)
  203              0.000423   if pumvisible()
                                return
  203              0.000137   endif
  203              0.000692   let group = a:from.'_to_'.a:to.a:suffix
  203   0.036302   0.002041   let l:from = airline#themes#get_highlight(a:from.a:suffix)
  203   0.035727   0.002105   let l:to = airline#themes#get_highlight(a:to.a:suffix)
  203              0.000256   if a:inverse
   73              0.000396     let colors = [ l:from[1], l:to[1], l:from[3], l:to[3] ]
  130              0.000100   else
  130              0.000739     let colors = [ l:to[1], l:from[1], l:to[3], l:from[3] ]
  203              0.000163   endif
  203              0.000707   let a:dict[group] = colors
  203   0.052987   0.001808   call airline#highlighter#exec(group, colors)

FUNCTION  airline#themes#get_highlight()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/themes.vim:31
Called 406 times
Total time:   0.067883
 Self time:   0.004454

count  total (s)   self (s)
  406   0.067736   0.004307   return call('airline#highlighter#get_highlight', [a:group] + a:000)

FUNCTION  airline#mode_changed()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline.vim:279
Called 18 times
Total time:   0.000494
 Self time:   0.000368

count  total (s)   self (s)
                              " airline#visual_active
                              " Boolean: for when to get visual wordcount
                              " needed for the wordcount extension
   18              0.000213   let g:airline#visual_active = (mode() =~? '[vs]')
   18   0.000242   0.000116   call airline#update_tabline()

FUNCTION  <SNR>79_is_case_break()
    Defined: /usr/share/vim/vim82/indent/sh.vim:242
Called 8 times
Total time:   0.000047
 Self time:   0.000047

count  total (s)   self (s)
    8              0.000041   return a:line =~ '^\s*;[;&]'

FUNCTION  coc#_insert_key()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc.vim:49
Called 45 times
Total time:   0.004958
 Self time:   0.002940

count  total (s)   self (s)
   45              0.001291   if get(a:, 1, 1)
   45   0.002723   0.000705     call coc#_cancel()
   45              0.000064   endif
   45              0.000657   return "\<c-r>=coc#rpc#".a:method."('doKeymap', ['".a:key."'])\<CR>"

FUNCTION  <SNR>79_end_block()
    Defined: /usr/share/vim/vim82/indent/sh.vim:274
Called 18 times
Total time:   0.000141
 Self time:   0.000141

count  total (s)   self (s)
   18              0.000129   return a:line =~ '^\s*}'

FUNCTION  airline#extensions#coc#get_warning()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim:10
Called 398 times
Total time:   0.020813
 Self time:   0.004754

count  total (s)   self (s)
  398   0.020454   0.004395   return airline#extensions#coc#get('warning')

FUNCTION  airline#extensions#coc#get_status()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim:45
Called 398 times
Total time:   0.023187
 Self time:   0.005921

count  total (s)   self (s)
                              " Shorten text for windows < 91 characters
  398   0.022566   0.005300   return airline#util#shorten(get(g:, 'coc_status', ''), 91, 9)

FUNCTION  <SNR>103_get_separator_change()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim:68
Called 2 times
Total time:   0.000773
 Self time:   0.000054

count  total (s)   self (s)
    2   0.000771   0.000052   return s:get_separator_change_with_end(a:new_group, a:old_group, a:end_group, a:end_group, a:sep_size, a:alt_sep_size)

FUNCTION  <SNR>86_hl_group_exists()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:93
Called 689 times
Total time:   0.008587
 Self time:   0.008587

count  total (s)   self (s)
  689              0.001995   if !hlexists(a:group)
                                return 0
  689              0.003035   elseif empty(synIDattr(hlID(a:group), 'fg'))
                                return 0
  689              0.000551   endif
  689              0.000762   return 1

FUNCTION  airline#extensions#tabline#buffers#get()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim:51
Called 95 times
Total time:   0.056132
 Self time:   0.005667

count  total (s)   self (s)
   95              0.000204   try
   95   0.040836   0.001463     call <sid>map_keys()
                              catch
                                " no-op
   95              0.000165   endtry
   95              0.000850   let cur = bufnr('%')
   95              0.000699   if cur == s:current_bufnr && &columns == s:column_width
   95              0.000991     if !g:airline_detect_modified || getbufvar(cur, '&modified') == s:current_modified
   94              0.000386       return s:current_tabline
    1              0.000001     endif
    1              0.000001   endif
                            
    1   0.000196   0.000021   let b = airline#extensions#tabline#new_builder()
    1              0.000007   let tab_bufs = tabpagebuflist(tabpagenr())
    1              0.000004   let show_buf_label_first = 0
                            
    1              0.000006   if get(g:, 'airline#extensions#tabline#buf_label_first', 0)
                                let show_buf_label_first = 1
    1              0.000001   endif
    1              0.000003   if show_buf_label_first
                                call airline#extensions#tabline#add_label(b, 'buffers', 0)
    1              0.000001   endif
                            
    1              0.000006   let b.tab_bufs = tabpagebuflist(tabpagenr())
                            
    1              0.000003   let b.overflow_group = 'airline_tabhid'
    1   0.000028   0.000016   let b.buffers = airline#extensions#tabline#buflist#list()
    1              0.000005   if get(g:, 'airline#extensions#tabline#current_first', 0)
                                if index(b.buffers, cur) > -1
                                  call remove(b.buffers, index(b.buffers, cur))
                                endif
                                let b.buffers = [cur] + b.buffers
    1              0.000001   endif
                            
    1              0.000005   function! b.get_group(i) dict
                                let bufnum = get(self.buffers, a:i, -1)
                                if bufnum == -1
                                  return ''
                                endif
                                let group = airline#extensions#tabline#group_of_bufnr(self.tab_bufs, bufnum)
                                if bufnum == bufnr('%')
                                  let s:current_modified = (group == 'airline_tabmod') ? 1 : 0
                                endif
                                return group
                              endfunction
                            
    1              0.000014   if has("tablineat")
                                function! b.get_pretitle(i) dict
                                  let bufnum = get(self.buffers, a:i, -1)
                                  return '%'.bufnum.'@airline#extensions#tabline#buffers#clickbuf@'
                                endfunction
                            
                                function! b.get_posttitle(i) dict
                                  return '%X'
                                endfunction
    1              0.000001   endif
                            
    1              0.000002   function! b.get_title(i) dict
                                let bufnum = get(self.buffers, a:i, -1)
                                let group = self.get_group(a:i)
                                let pgroup = self.get_group(a:i - 1)
                                " always add a space when powerline_fonts are used
                                " or for the very first item
                                if get(g:, 'airline_powerline_fonts', 0) || a:i == 0
                                  let space = s:spc
                                else
                                  let space= (pgroup == group ? s:spc : '')
                                endif
                            
                                if get(g:, 'airline#extensions#tabline#buffer_idx_mode', 0)
                                  if len(s:number_map) > 0
                                    return space. s:get_number(a:i) . '%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)' . s:spc
                                  else
                                    return '['.(a:i+1).s:spc.'%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)'.']'
                                  endif
                                else
                                  return space.'%(%{airline#extensions#tabline#get_buffer_name('.bufnum.')}%)'.s:spc
                                endif
                              endfunction
                            
    1              0.000011   let current_buffer = max([index(b.buffers, cur), 0])
    1              0.000006   let last_buffer = len(b.buffers) - 1
    1   0.000047   0.000011   call b.insert_titles(current_buffer, 0, last_buffer)
                            
    1   0.000020   0.000010   call b.add_section('airline_tabfill', '')
    1   0.000015   0.000007   call b.split()
    1   0.000014   0.000007   call b.add_section('airline_tabfill', '')
    1              0.000003   if !show_buf_label_first
    1   0.000072   0.000017     call airline#extensions#tabline#add_label(b, 'buffers', 1)
    1              0.000001   endif
                            
    1   0.000049   0.000016   call airline#extensions#tabline#add_tab_label(b)
                            
    1              0.000004   let s:current_bufnr = cur
    1              0.000003   let s:column_width = &columns
    1   0.010769   0.000013   let s:current_tabline = b.build()
    1              0.000005   let s:current_visible_buffers = copy(b.buffers)
                              " Do not remove from s:current_visible_buffers, this breaks s:select_tab()
                              "if b._right_title <= last_buffer
                              "  call remove(s:current_visible_buffers, b._right_title, last_buffer)
                              "endif
                              "if b._left_title > 0
                              "  call remove(s:current_visible_buffers, 0, b._left_title)
                              "endif
    1              0.000002   return s:current_tabline

FUNCTION  coc#util#get_buf_lines()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/util.vim:604
Called 364 times
Total time:   0.059878
 Self time:   0.059878

count  total (s)   self (s)
  364              0.006046   if !bufloaded(a:bufnr) | return '' | endif
  364              0.002988   let changedtick = getbufvar(a:bufnr, 'changedtick')
  364              0.001316   if changedtick == a:changedtick
   93              0.000227     return v:null
  271              0.000287   endif
  271              0.046817   return { 'lines': getbufline(a:bufnr, 1, '$'), 'changedtick': getbufvar(a:bufnr, 'changedtick') }

FUNCTION  airline#highlighter#highlight()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:237
Called 18 times
Total time:   0.339319
 Self time:   0.057472

count  total (s)   self (s)
   18              0.000065   let bufnr = a:0 ? a:1 : ''
   18              0.000083   let p = g:airline#themes#{g:airline_theme}#palette
                            
                              " draw the base mode, followed by any overrides
   18              0.000362   let mapped = map(a:modes, 'v:val == a:modes[0] ? v:val : a:modes[0]."_".v:val')
   18              0.000077   let suffix = a:modes[0] == 'inactive' ? '_inactive' : ''
   18              0.000044   let airline_grouplist = []
   18              0.000121   let buffers_in_tabpage = sort(tabpagebuflist())
   18              0.000069   if exists("*uniq")
   18              0.000074     let buffers_in_tabpage = uniq(buffers_in_tabpage)
   18              0.000021   endif
                              " mapped might be something like ['normal', 'normal_modified']
                              " if a group is in both modes available, only define the second
                              " that is how this was done previously overwrite the previous definition
   54              0.000164   for mode in reverse(mapped)
   36              0.000329     if exists('g:airline#themes#{g:airline_theme}#palette[mode]')
   18              0.000091       let dict = g:airline#themes#{g:airline_theme}#palette[mode]
  378              0.000992       for kvp in items(dict)
  360              0.000985         let mode_colors = kvp[1]
  360              0.000906         let name = kvp[0]
  360              0.001208         if name is# 'airline_c' && !empty(bufnr) && suffix is# '_inactive'
                                      let name = 'airline_c'.bufnr
  360              0.000472         endif
                                    " do not re-create highlighting for buffers that are no longer visible
                                    " in the current tabpage
  360              0.002716         if name =~# 'airline_c\d\+'
                                      let bnr = matchstr(name, 'airline_c\zs\d\+') + 0
                                      if bnr > 0 && index(buffers_in_tabpage, bnr) == -1
                                        continue
                                      endif
  360              0.002202         elseif (name =~# '_to_') || (name[0:10] is# 'airline_tab' && !empty(suffix))
                                      " group will be redefined below at exec_separator
                                      " or is not needed for tabline with '_inactive' suffix
                                      " since active flag is 1 for builder)
  198              0.000239           continue
  162              0.000135         endif
  162   0.003432   0.001835         if s:group_not_done(airline_grouplist, name.suffix)
  162   0.052546   0.001747           call airline#highlighter#exec(name.suffix, mode_colors)
  162              0.000148         endif
                            
  162              0.000478         if !has_key(p, 'accents') 
                                      " work around a broken installation
                                      " shouldn't actually happen, p should always contain accents
                                      continue
  162              0.000144         endif
                            
  486              0.001170         for accent in keys(s:accents)
  324              0.000964           if !has_key(p.accents, accent)
                                        continue
  324              0.000283           endif
  324              0.001237           let colors = copy(mode_colors)
  324              0.001100           if p.accents[accent][0] != ''
  162              0.000606             let colors[0] = p.accents[accent][0]
  324              0.000295           endif
  324              0.000889           if p.accents[accent][2] != ''
  162              0.000553             let colors[2] = p.accents[accent][2]
  324              0.000277           endif
  324              0.000756           if len(colors) >= 5
  324              0.001528             let colors[4] = get(p.accents[accent], 4, '')
                                      else
                                        call add(colors, get(p.accents[accent], 4, ''))
  324              0.000276           endif
  324   0.007050   0.003905           if s:group_not_done(airline_grouplist, name.suffix.'_'.accent)
  324   0.104609   0.004026             call airline#highlighter#exec(name.suffix.'_'.accent, colors)
  324              0.000296           endif
  486              0.000516         endfor
  180              0.000178       endfor
                            
   18              0.000047       if empty(s:separators)
                                    " nothing to be done
                                    continue
   18              0.000011       endif
                                  " TODO: optimize this
  216              0.000461       for sep in items(s:separators)
                                    " we cannot check, that the group already exists, else the separators
                                    " might not be correctly defined. But perhaps we can skip above groups
                                    " that match the '_to_' name, because they would be redefined here...
  198   0.128443   0.002720         call <sid>exec_separator(dict, sep[1][0], sep[1][1], sep[1][2], suffix)
  216              0.000218       endfor
   36              0.000037     endif
   54              0.000090   endfor

FUNCTION  coc#float#check_related()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/float.vim:798
Called 9 times
Total time:   0.000389
 Self time:   0.000389

count  total (s)   self (s)
    9              0.000135   let invalids = []
    9              0.000052   if s:is_vim
    9              0.000117     if !exists('*popup_list')
    9              0.000035       return
                                endif
                                for id in popup_list()
                                  let target = getwinvar(id, 'target_winid', 0)
                                  if (target && !s:popup_visible(target)) || getwinvar(id, 'kind', '') == 'pum'
                                    call add(invalids, id)
                                  endif
                                endfor
                              else
                                for i in range(1, winnr('$'))
                                  let target = getwinvar(i, 'target_winid', 0)
                                  if target && !nvim_win_is_valid(target)
                                    call add(invalids, win_getid(i))
                                  elseif getwinvar(i, 'kind', '') == 'pum'
                                    call add(invalids, win_getid(i))
                                  endif
                                endfor
                              endif
                              for id in invalids
                                call coc#float#close(id)
                              endfor

FUNCTION  coc#rpc#ready()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/rpc.vim:31
Called 1013 times
Total time:   0.016351
 Self time:   0.016351

count  total (s)   self (s)
 1013              0.009664   if empty(s:client) || s:client['running'] == 0
                                return 0
 1013              0.001146   endif
 1013              0.001702   return 1

FUNCTION  coc#util#cursor()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/util.vim:35
Called 17 times
Total time:   0.000583
 Self time:   0.000583

count  total (s)   self (s)
   17              0.000539   return [line('.') - 1, strchars(strpart(getline('.'), 0, col('.') - 1))]

FUNCTION  <SNR>79_indent_value()
    Defined: /usr/share/vim/vim82/indent/sh.vim:62
Called 4 times
Total time:   0.000146
 Self time:   0.000146

count  total (s)   self (s)
    4              0.000076   let Value = exists('b:sh_indent_options') && has_key(b:sh_indent_options, a:option) ? b:sh_indent_options[a:option] : s:sh_indent_defaults[a:option]
    4              0.000044   if type(Value) == type(function('type'))
    4              0.000018     return Value()
                              endif
                              return Value

FUNCTION  airline#parts#filetype()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:102
Called 398 times
Total time:   0.011403
 Self time:   0.005935

count  total (s)   self (s)
  398   0.010935   0.005467   return (airline#util#winwidth() < 90 && strlen(&filetype) > 3) ? matchstr(&filetype, '...'). (&encoding is? 'utf-8' ? '…' : '>') : &filetype

FUNCTION  <SNR>90_conflict_marker()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim:52
Called 2 times
Total time:   0.000856
 Self time:   0.000856

count  total (s)   self (s)
                              " Checks for git conflict markers
    2              0.000006   let annotation = '\%([0-9A-Za-z_.:]\+\)\?'
    2              0.000009   if &ft is# 'rst'
                                " rst filetypes use '=======' as header
                                let pattern = '^\%(\%(<\{7} '.annotation. '\)\|\%(>\{7\} '.annotation.'\)\)$'
    2              0.000002   else
    2              0.000009     let pattern = '^\%(\%(<\{7} '.annotation. '\)\|\%(=\{7\}\)\|\%(>\{7\} '.annotation.'\)\)$'
    2              0.000001   endif
    2              0.000823   return search(pattern, 'nw')

FUNCTION  airline#extensions#tabline#formatters#unique_tail#format()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/unique_tail.vim:6
Called 96 times
Total time:   0.023144
 Self time:   0.017438

count  total (s)   self (s)
   96              0.000411   let duplicates = {}
   96              0.000201   let tails = {}
   96              0.000189   let map = {}
  192              0.000553   for nr in a:buffers
   96              0.000507     let name = bufname(nr)
   96              0.000333     if empty(name)
                                  let map[nr] = airline#extensions#tabline#formatters#default#wrap_name(nr, '[No Name]')
   96              0.000130     else
   96              0.001231       if name =~ 'term://'
                                    " Neovim Terminal
                                    let tail = substitute(name, '\(term:\)//.*:\(.*\)', '\1 \2', '')
   96              0.000095       else
   96              0.001130         let tail = fnamemodify(name, ':s?/\+$??:t')
   96              0.000231       endif
   96              0.000394       if has_key(tails, tail)
                                    let duplicates[nr] = nr
   96              0.000088       endif
   96              0.000364       let tails[tail] = 1
   96   0.008570   0.002864       let map[nr] = airline#extensions#tabline#formatters#default#wrap_name(nr, tail)
   96              0.000106     endif
  192              0.000325   endfor
                            
   96              0.000527   let fmod = get(g:, 'airline#extensions#tabline#fnamemod', ':p:.')
   96              0.000459   for nr in values(duplicates)
                                let name = bufname(nr)
                                let fnamecollapse = get(g:, 'airline#extensions#tabline#fnamecollapse', 1)
                                if fnamecollapse
                                  let map[nr] = airline#extensions#tabline#formatters#default#wrap_name(nr, substitute(fnamemodify(name, fmod), '\v\w\zs.{-}\ze(\\|/)', '', 'g'))
                                else
                                  let map[nr] = airline#extensions#tabline#formatters#default#wrap_name(nr, fnamemodify(name, fmod))
                                endif
   96              0.000130   endfor
                            
   96              0.000411   if has_key(map, a:bufnr)
   96              0.000348     return map[a:bufnr]
                              endif
                            
                              " if we get here, the buffer list isn't in sync with the selected buffer yet, fall back to the default
                              return airline#extensions#tabline#formatters#default#format(a:bufnr, a:buffers)

FUNCTION  airline#parts#iminsert()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:82
Called 398 times
Total time:   0.003640
 Self time:   0.003640

count  total (s)   self (s)
  398              0.001424   if g:airline_detect_iminsert && &iminsert && exists('b:keymap_name')
                                return toupper(b:keymap_name)
  398              0.000367   endif
  398              0.000478   return ''

FUNCTION  airline#update_tabline()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline.vim:273
Called 39 times
Total time:   0.000471
 Self time:   0.000471

count  total (s)   self (s)
   39              0.000260   if get(g:, 'airline_statusline_ontop', 0)
                                call airline#extensions#tabline#redraw()
   39              0.000045   endif

FUNCTION  coc#rpc#request()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/rpc.vim:88
Called 45 times
Total time:   0.168238
 Self time:   0.002081

count  total (s)   self (s)
   45   0.001802   0.000804   if !coc#rpc#ready()
                                return ''
   45              0.000058   endif
   45   0.166190   0.001031   return s:client['request'](a:method, a:args)

FUNCTION  coc#_hide()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc.vim:97
Called 30 times
Total time:   0.000353
 Self time:   0.000353

count  total (s)   self (s)
   30              0.000226   if !pumvisible() | return | endif
    4              0.000073   call feedkeys("\<C-e>", 'in')

FUNCTION  airline#extensions#coc#get()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim:18
Called 796 times
Total time:   0.029781
 Self time:   0.029781

count  total (s)   self (s)
  796              0.004120   if !exists(':CocCommand')
                                return ''
  796              0.000793   endif
  796              0.003429   let _backup = get(g:, 'coc_stl_format', '')
  796              0.002554   let is_err = (a:type  is# 'error')
  796              0.001106   if is_err
  398              0.001896     let g:coc_stl_format = get(g:, 'airline#extensions#coc#stl_format_err', '%E{[%e(#%fe)]}')
  398              0.000357   else
  398              0.001893     let g:coc_stl_format = get(g:, 'airline#extensions#coc#stl_format_warn', '%W{[%w(#%fw)]}')
  796              0.000797   endif
  796              0.003056   let info = get(b:, 'coc_diagnostic_info', {})
  796              0.003142   if empty(info) | return '' | endif
                            
                            
                              let cnt = get(info, a:type, 0)
                              if !empty(_backup)
                                let g:coc_stl_format = _backup
                              endif
                            
                              if empty(cnt)
                                return ''
                              else
                                return (is_err ? s:error_symbol : s:warning_symbol).cnt
                              endif

FUNCTION  <SNR>86_get_syn()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:38
Called 4412 times
Total time:   0.101464
 Self time:   0.101464

count  total (s)   self (s)
 4412              0.006997   let color = ''
 4412              0.011485   if hlexists(a:group)
 4412              0.022766     let color = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)
 4412              0.003722   endif
 4412              0.010809   if empty(color) || color == -1
                                " should always exist
                                let color = synIDattr(synIDtrans(hlID('Normal')), a:what, a:mode)
                                " however, just in case
                                if empty(color) || color == -1
                                  let color = 'NONE'
                                endif
 4412              0.002960   endif
 4412              0.005370   return color

FUNCTION  309()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/api.vim:75
Called 70 times
Total time:   0.023167
 Self time:   0.010828

count  total (s)   self (s)
   70              0.000612   let res = []
  275              0.001089   for [key, arglist] in a:calls
  205              0.001939     let name = key[5:]
  205              0.000333     try
  205   0.015728   0.003389       call add(res, call(s:funcs[name], arglist))
                                catch /.*/
                                  return [res, v:exception]
  205              0.000351     endtry
  275              0.000500   endfor
   70              0.000285   return [res, v:null]

FUNCTION  GetShIndent()
    Defined: /usr/share/vim/vim82/indent/sh.vim:73
Called 10 times
Total time:   0.014640
 Self time:   0.013146

count  total (s)   self (s)
   10              0.000259   let curline = getline(v:lnum)
   10              0.000223   let lnum = prevnonblank(v:lnum - 1)
   10              0.000038   if lnum == 0
                                return 0
   10              0.000025   endif
   10              0.000037   let line = getline(lnum)
                            
   10              0.000051   let pnum = prevnonblank(lnum - 1)
   10              0.000037   let pline = getline(pnum)
   10              0.000042   let ind = indent(lnum)
                            
                              " Check contents of previous lines
                              " should not apply to e.g. commented lines
   10              0.000556   if line =~ '^\s*\%(if\|then\|do\|else\|elif\|case\|while\|until\|for\|select\|foreach\)\>' ||  (&ft is# 'zsh' && line =~ '^\s*\<\%(if\|then\|do\|else\|elif\|case\|while\|until\|for\|select\|foreach\)\>')
                                if !s:is_end_expression(line)
                                  let ind += s:indent_value('default')
                                endif
   10   0.000378   0.000185   elseif s:is_case_label(line, pnum)
                                if !s:is_case_ended(line)
                                  let ind += s:indent_value('case-statements')
                                endif
                              " function definition
   10   0.000375   0.000115   elseif s:is_function_definition(line)
    2              0.000018     if line !~ '}\s*\%(#.*\)\=$'
    2   0.000125   0.000033       let ind += s:indent_value('default')
    2              0.000002     endif
                              " array (only works for zsh or bash)
    8   0.000147   0.000080   elseif s:is_array(line) && line !~ ')\s*$' && (&ft is# 'zsh' || s:is_bash())
                                  let ind += s:indent_value('continuation-line')
                              " end of array
    8              0.000044   elseif curline =~ '^\s*)$'
                                  let ind -= s:indent_value('continuation-line')
    8   0.000257   0.000081   elseif s:is_continuation_line(line)
                                if pnum == 0 || !s:is_continuation_line(pline)
                                  let ind += s:indent_value('continuation-line')
                                endif
    8   0.000160   0.000078   elseif s:end_block(line) && !s:start_block(line)
                                let ind -= s:indent_value('default')
    8   0.000340   0.000103   elseif pnum != 0 && s:is_continuation_line(pline) && !s:end_block(curline) && !s:is_end_expression(curline)
                                " only add indent, if line and pline is in the same block
                                let i = v:lnum
                                let ind2 = indent(s:find_continued_lnum(pnum))
                                while !s:is_empty(getline(i)) && i > pnum
                                  let i -= 1
                                endw
                                if i == pnum
                                  let ind += ind2
                                else
                                  let ind = ind2
                                endif
   10              0.000012   endif
                            
   10              0.000029   let pine = line
                              " Check content of current line
   10              0.000022   let line = curline
                              " Current line is a endif line, so get indent from start of "if condition" line
                              " TODO: should we do the same for other "end" lines?
   10              0.000078   if curline =~ '^\s*\%(fi\);\?\s*\%(#.*\)\=$'
                                let ind = indent(v:lnum)
                                let previous_line = searchpair('\<if\>', '', '\<fi\>\zs', 'bnW', 'synIDattr(synID(line("."),col("."), 1),"name") =~? "comment\\|quote"')
                                if previous_line > 0
                                  let ind = indent(previous_line)
                                endif
   10   0.000242   0.000183   elseif line =~ '^\s*\%(then\|do\|else\|elif\|done\|end\)\>' || s:end_block(line)
    2   0.000079   0.000025     let ind -= s:indent_value('default')
    8              0.000056   elseif line =~ '^\s*esac\>' && s:is_case_empty(getline(v:lnum - 1))
                                let ind -= s:indent_value('default')
    8              0.000028   elseif line =~ '^\s*esac\>'
                                let ind -= (s:is_case_label(pine, lnum) && s:is_case_ended(pine) ? 0 : s:indent_value('case-statements')) + s:indent_value('case-labels')
                                if s:is_case_break(pine)
                                  let ind += s:indent_value('case-breaks')
                                endif
    8   0.000117   0.000065   elseif s:is_case_label(line, lnum)
                                if s:is_case(pine)
                                  let ind = indent(lnum) + s:indent_value('case-labels')
                                else
                                  let ind -= (s:is_case_label(pine, lnum) && s:is_case_ended(pine) ? 0 : s:indent_value('case-statements')) - s:indent_value('case-breaks')
                                endif
    8   0.000113   0.000066   elseif s:is_case_break(line)
                                let ind -= s:indent_value('case-breaks')
    8   0.000161   0.000055   elseif s:is_here_doc(line)
                                let ind = 0
                              " statements, executed within a here document. Keep the current indent
    8              0.008746   elseif match(map(synstack(v:lnum, 1), 'synIDattr(v:val, "name")'), '\c\mheredoc') > -1
                                return indent(v:lnum)
    8   0.000227   0.000158   elseif s:is_comment(line) && s:is_empty(getline(v:lnum-1))
                                return indent(v:lnum)
   10              0.000018   endif
                            
   10              0.000028   return ind > 0 ? ind : 0

FUNCTION  airline#extensions#tabline#buflist#list()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim:35
Called 97 times
Total time:   0.000920
 Self time:   0.000920

count  total (s)   self (s)
   97              0.000577   if exists('s:current_buffer_list')
   97              0.000201     return s:current_buffer_list
                              endif
                            
                              let exclude_buffers = get(g:, 'airline#extensions#tabline#exclude_buffers', [])
                              let exclude_paths = get(g:, 'airline#extensions#tabline#excludes', [])
                              let exclude_preview = get(g:, 'airline#extensions#tabline#exclude_preview', 1)
                            
                              let list = (exists('g:did_bufmru') && g:did_bufmru) ? BufMRUList() : range(1, bufnr("$"))
                            
                              let buffers = []
                              " If this is too slow, we can switch to a different algorithm.
                              " Basically branch 535 already does it, but since it relies on
                              " BufAdd autocommand, I'd like to avoid this if possible.
                              for nr in list
                                if buflisted(nr)
                                  " Do not add to the bufferlist, if either
                                  " 1) bufnr is exclude_buffers list
                                  " 2) buffername matches one of exclude_paths patterns
                                  " 3) buffer is a quickfix buffer
                                  " 4) when excluding preview windows:
                                  "     'bufhidden' == wipe
                                  "     'buftype' == nofile
                                  " 5) ignore buffers matching airline#extensions#tabline#ignore_bufadd_pat
                            
                                  " check buffer numbers first
                                  if index(exclude_buffers, nr) >= 0
                                    continue
                                  " check paths second
                                  elseif !empty(exclude_paths) && s:ExcludePaths(nr, exclude_paths)
                                    continue
                                  " ignore buffers matching airline#extensions#tabline#ignore_bufadd_pat
                                  elseif airline#util#ignore_buf(bufname(nr))
                                    continue
                                  " check other types last
                                  elseif s:ExcludeOther(nr, exclude_preview)
                                    continue
                                  endif
                            
                                  call add(buffers, nr)
                                endif
                              endfor
                            
                              let s:current_buffer_list = buffers
                              return buffers

FUNCTION  313()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/api.vim:97
Called 757 times
Total time:   0.083962
 Self time:   0.016379

count  total (s)   self (s)
  757   0.083108   0.015525   return call(a:method, a:args)

FUNCTION  315()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/api.vim:105
Called 106 times
Total time:   0.007248
 Self time:   0.007248

count  total (s)   self (s)
                              " command that could cause cursor vanish
  106              0.002042   if a:command =~# '^echo' || a:command =~# '^redraw' || a:command =~# '^sign place'
                                call timer_start(0, {-> s:execute(a:command)})
  106              0.000174   else
  106              0.003648     execute a:command
  106              0.000143   endif

FUNCTION  316()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/api.vim:114
Called 340 times
Total time:   0.063051
 Self time:   0.029003

count  total (s)   self (s)
  340   0.062408   0.028360   return eval(a:expr)

FUNCTION  airline#extensions#tabline#formatters#webdevicons#format()
    Defined: ~/.vim/plugged/vim-devicons/autoload/airline/extensions/tabline/formatters/webdevicons.vim:6
Called 96 times
Total time:   0.056923
 Self time:   0.005232

count  total (s)   self (s)
                              " Call original formatter.
   96   0.025825   0.002681   let originalFormatter = airline#extensions#tabline#formatters#{g:_webdevicons_airline_orig_formatter}#format(a:bufnr, a:buffers)
   96   0.030813   0.002266   return originalFormatter . g:WebDevIconsTabAirLineBeforeGlyphPadding . WebDevIconsGetFileTypeSymbol(bufname(a:bufnr)) . g:WebDevIconsTabAirLineAfterGlyphPadding

FUNCTION  coc#_do_complete()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc.vim:68
Called 62 times
Total time:   0.005279
 Self time:   0.005279

count  total (s)   self (s)
   62              0.002080   let g:coc#_context = { 'start': a:start, 'candidates': a:items, 'preselect': a:preselect}
   62              0.001720   if mode() =~# 'i' && &paste != 1
   62              0.001143     call feedkeys("\<Plug>CocRefresh", 'i')
   62              0.000137   endif

FUNCTION  <SNR>79_is_continuation_line()
    Defined: /usr/share/vim/vim82/indent/sh.vim:174
Called 16 times
Total time:   0.000413
 Self time:   0.000413

count  total (s)   self (s)
                              " Comment, cannot be a line continuation
   16              0.000126   if a:line =~ '^\s*#'
    9              0.000021     return 0
    7              0.000007   else
                                " start-of-line
                                " \\ or && or || or |
                                " followed optionally by { or #
    7              0.000208     return a:line =~ '\%(\%(^\|[^\\]\)\\\|&&\|||\||\)' . '\s*\({\s*\)\=\(#.*\)\=$'
                              endif

FUNCTION  airline#util#winwidth()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:19
Called 2510 times
Total time:   0.038046
 Self time:   0.038046

count  total (s)   self (s)
 2510              0.011485   let nr = get(a:000, 0, 0)
 2510              0.009126   if get(g:, 'airline_statusline_ontop', 0)
                                return &columns
 2510              0.002403   else
 2510              0.007521     return winwidth(nr)
                              endif

FUNCTION  <SNR>86_CheckDefined()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:126
Called 689 times
Total time:   0.017836
 Self time:   0.017836

count  total (s)   self (s)
                              " Checks, whether the definition of the colors is valid and is not empty or NONE
                              " e.g. if the colors would expand to this:
                              " hi airline_c ctermfg=NONE ctermbg=NONE
                              " that means to clear that highlighting group, therefore, fallback to Normal
                              " highlighting group for the cterm values
                            
                              " This only works, if the Normal highlighting group is actually defined, so
                              " return early, if it has been cleared
  689              0.002928   if !exists("g:airline#highlighter#normal_fg_hi")
                                let g:airline#highlighter#normal_fg_hi = synIDattr(synIDtrans(hlID('Normal')), 'fg', 'cterm')
  689              0.000560   endif
  689              0.002372   if empty(g:airline#highlighter#normal_fg_hi) || g:airline#highlighter#normal_fg_hi < 0
                                return a:colors
  689              0.000526   endif
                            
  689              0.001841   for val in a:colors
  689              0.001920     if !empty(val) && val !=# 'NONE'
  689              0.001064       return a:colors
                                endif
                              endfor
                              " this adds the bold attribute to the term argument of the :hi command,
                              " but at least this makes sure, the group will be defined
                              let fg = g:airline#highlighter#normal_fg_hi
                              let bg = synIDattr(synIDtrans(hlID('Normal')), 'bg', 'cterm')
                              if bg < 0
                                " in case there is no background color defined for Normal
                                let bg = a:colors[3]
                              endif
                              return a:colors[0:1] + [fg, bg] + [a:colors[4]]

FUNCTION  airline#util#doautocmd()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:176
Called 18 times
Total time:   0.001405
 Self time:   0.000436

count  total (s)   self (s)
   18   0.001401   0.000432   exe printf("silent doautocmd %s User %s", s:nomodeline, a:event)

FUNCTION  <SNR>99_section_is_empty()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:182
Called 9 times
Total time:   0.000114
 Self time:   0.000114

count  total (s)   self (s)
    9              0.000021   let start=1
                            
                              " do not check for inactive windows or the tabline
    9              0.000022   if a:self._context.active == 0
                                return 0
    9              0.000034   elseif get(a:self._context, 'tabline', 0)
    9              0.000013     return 0
                              endif
                            
                              " only check, if airline#skip_empty_sections == 1
                              if get(g:, 'airline_skip_empty_sections', 0) == 0
                                return 0
                              endif
                            
                              " only check, if airline#skip_empty_sections == 1
                              if get(w:, 'airline_skip_empty_sections', -1) == 0
                                return 0
                              endif
                              " assume accents sections to be never empty
                              " (avoides, that on startup the mode message becomes empty)
                              if match(a:content, '%#__accent_[^#]*#.*__restore__#') > -1
                                return 0
                              endif
                              if empty(a:content)
                                return 1
                              endif
                              let list=matchlist(a:content, '%{\zs.\{-}\ze}', 1, start)
                              if empty(list)
                                return 0 " no function in statusline text
                              endif
                              while len(list) > 0
                                let expr = list[0]
                                try
                                  " catch all exceptions, just in case
                                  if !empty(eval(expr))
                                    return 0
                                  endif
                                catch
                                  return 0
                                endtry
                                let start += 1
                                let list=matchlist(a:content, '%{\zs.\{-}\ze}', 1, start)
                              endw
                              return 1

FUNCTION  coc#util#get_complete_option()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/util.vim:337
Called 39 times
Total time:   0.033465
 Self time:   0.033465

count  total (s)   self (s)
   39              0.000280   let pos = getcurpos()
   39              0.000642   let line = getline(pos[1])
   39              0.001251   let input = matchstr(strpart(line, 0, pos[2] - 1), '\k*$')
   39              0.000293   let col = pos[2] - strlen(input)
   39              0.027552   let synname = synIDattr(synID(pos[1], col, 1), 'name')
   39              0.003263   return { 'word': matchstr(strpart(line, col - 1), '^\k\+'), 'input': empty(input) ? '' : input, 'line': line, 'filetype': &filetype, 'filepath': expand('%:p'), 'bufnr': bufnr('%'), 'linenr': pos[1], 'colnr' : pos[2], 'col': col - 1, 'synname': synname, 'changedtick': b:changedtick, 'blacklist': get(b:, 'coc_suggest_blacklist', []),}

FUNCTION  <SNR>79_is_case_label()
    Defined: /usr/share/vim/vim82/indent/sh.vim:205
Called 18 times
Total time:   0.000245
 Self time:   0.000245

count  total (s)   self (s)
   18              0.000180   if a:line !~ '^\s*(\=.*)'
   18              0.000034     return 0
                              endif
                            
                              if a:pnum > 0
                                let pine = getline(a:pnum)
                                if !(s:is_case(pine) || s:is_case_ended(pine))
                                  return 0
                                endif
                              endif
                            
                              let suffix = substitute(a:line, '^\s*(\=', "", "")
                              let nesting = 0
                              let i = 0
                              let n = strlen(suffix)
                              while i < n
                                let c = suffix[i]
                                let i += 1
                                if c == '\\'
                                  let i += 1
                                elseif c == '('
                                  let nesting += 1
                                elseif c == ')'
                                  if nesting == 0
                                    return 1
                                  endif
                                  let nesting -= 1
                                endif
                              endwhile
                              return 0

FUNCTION  airline#extensions#tabline#get_buffer_name()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim:208
Called 96 times
Total time:   0.062683
 Self time:   0.004852

count  total (s)   self (s)
   96   0.002488   0.001580   let buffers = a:0 ? a:1 : airline#extensions#tabline#buflist#list()
   96              0.000682   let formatter = get(g:, 'airline#extensions#tabline#formatter', 'default')
   96   0.059356   0.002433   return airline#extensions#tabline#formatters#{formatter}#format(a:nr, buffers)

FUNCTION  airline#extensions#tabline#new_builder()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim:214
Called 1 time
Total time:   0.000175
 Self time:   0.000087

count  total (s)   self (s)
    1              0.000027   let builder_context = { 'active'        : 1, 'tabline'       : 1, 'right_sep'     : get(g:, 'airline#extensions#tabline#right_sep'    , g:airline_right_sep), 'right_alt_sep' : get(g:, 'airline#extensions#tabline#right_alt_sep', g:airline_right_alt_sep), }
    1              0.000007   if get(g:, 'airline_powerline_fonts', 0)
    1              0.000011     let builder_context.left_sep     = get(g:, 'airline#extensions#tabline#left_sep'     , g:airline_left_sep)
    1              0.000009     let builder_context.left_alt_sep = get(g:, 'airline#extensions#tabline#left_alt_sep' , g:airline_left_alt_sep)
                              else
                                let builder_context.left_sep     = get(g:, 'airline#extensions#tabline#left_sep'     , ' ')
                                let builder_context.left_alt_sep = get(g:, 'airline#extensions#tabline#left_alt_sep' , '|')
    1              0.000001   endif
                            
    1   0.000106   0.000018   return airline#extensions#tabline#builder#new(builder_context)

FUNCTION  airline#extensions#tabline#add_label()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim:252
Called 1 time
Total time:   0.000055
 Self time:   0.000028

count  total (s)   self (s)
    1              0.000005   if get(g:, 'airline#extensions#tabline#show_tab_type', 1)
    1   0.000046   0.000019     call a:dict.add_section_spaced('airline_tablabel'. (a:right ? '_right' : ''), get(g:, 'airline#extensions#tabline#'.a:type.'_label', a:type))
    1              0.000001   endif

FUNCTION  <SNR>103_tabline_evaluated_length()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim:223
Called 5 times
Total time:   0.001230
 Self time:   0.000105

count  total (s)   self (s)
    5   0.001229   0.000104   return airline#util#strchars(s:evaluate_tabline(a:tabline))

FUNCTION  <SNR>79_is_here_doc()
    Defined: /usr/share/vim/vim82/indent/sh.vim:246
Called 8 times
Total time:   0.000106
 Self time:   0.000106

count  total (s)   self (s)
    8              0.000037     if a:line =~ '^\w\+$'
                                  let here_pat = '<<-\?'. s:escape(a:line). '\$'
                                  return search(here_pat, 'bnW') > 0
    8              0.000006     endif
    8              0.000010     return 0

FUNCTION  airline#util#wrap()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:42
Called 3582 times
Total time:   0.035447
 Self time:   0.030604

count  total (s)   self (s)
 3582   0.018741   0.013898   if a:minwidth > 0 && airline#util#winwidth() < a:minwidth
                                return ''
 3582              0.003245   endif
 3582              0.006085   return a:text

FUNCTION  <SNR>47_notify()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/client.vim:181
Called 968 times
Total time:   0.115453
 Self time:   0.108053

count  total (s)   self (s)
  968   0.021624   0.014224   let channel = coc#client#get_channel(self)
  968              0.003309   if empty(channel)
                                return ''
  968              0.001078   endif
  968              0.001698   try
  968              0.001647     if s:is_vim
  968              0.037380       call ch_sendraw(channel, json_encode([0, [a:method, a:args]])."\n")
                                else
                                  call call('rpcnotify', [channel, a:method] + a:args)
  968              0.001119     endif
                              catch /.*/
                                if v:exception =~# 'E475'
                                  if get(g:, 'coc_vim_leaving', 0)
                                    return
                                  endif
                                  echohl Error | echom '['.self.name.'] server connection lost' | echohl None
                                  let name = self.name
                                  call s:on_exit(name, 0)
                                  execute 'silent do User ConnectionLost'.toupper(name[0]).name[1:]
                                elseif v:exception =~# 'E12'
                                  " neovim's bug, ignore it
                                else
                                  echohl Error | echo 'Error on notify ('.a:method.'): '.v:exception | echohl None
                                endif
  968              0.001789   endtry

FUNCTION  airline#extensions#tabline#get()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim:149
Called 95 times
Total time:   0.065517
 Self time:   0.009385

count  total (s)   self (s)
   95              0.000868   let show_buffers = get(g:, 'airline#extensions#tabline#show_buffers', 1)
   95              0.000517   let show_tabs = get(g:, 'airline#extensions#tabline#show_tabs', 1)
                            
   95              0.000604   let curtabcnt = tabpagenr('$')
   95              0.000365   if curtabcnt != s:current_tabcnt
                                let s:current_tabcnt = curtabcnt
                                call airline#extensions#tabline#tabs#invalidate()
                                call airline#extensions#tabline#buffers#invalidate()
                                call airline#extensions#tabline#ctrlspace#invalidate()
                                call airline#extensions#tabline#tabws#invalidate()
   95              0.000108   endif
                            
   95              0.000942   if !exists('#airline#BufAdd#*')
                                autocmd airline BufAdd * call <sid>update_tabline(0)
   95              0.000090   endif
   95              0.000617   if !exists('#airline#SessionLoadPost')
                                autocmd airline SessionLoadPost * call <sid>update_tabline(1)
   95              0.000087   endif
   95              0.000174   if s:ctrlspace
                                return airline#extensions#tabline#ctrlspace#get()
   95              0.000218   elseif s:tabws
                                return airline#extensions#tabline#tabws#get()
   95              0.000305   elseif show_buffers && curtabcnt == 1 || !show_tabs
   95   0.057781   0.001649     return airline#extensions#tabline#buffers#get()
                              else
                                return airline#extensions#tabline#tabs#get()
                              endif

FUNCTION  186()
    Defined: ~/.vim/plugged/nerdtree/lib/nerdtree/creator.vim:37
Called 9 times
Total time:   0.000039
 Self time:   0.000039

count  total (s)   self (s)
    9              0.000024     return 'NERD_tree_'

FUNCTION  airline#extensions#whitespace#check()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim:64
Called 398 times
Total time:   0.103631
 Self time:   0.076691

count  total (s)   self (s)
  398              0.002732   let max_lines = get(g:, 'airline#extensions#whitespace#max_lines', 20000)
  398              0.003285   if &readonly || !&modifiable || !s:enabled || line('$') > max_lines || get(b:, 'airline_whitespace_disabled', 0)
                                return ''
  398              0.000350   endif
  398              0.003711   let skip_check_ft = extend(s:skip_check_ft, get(g:, 'airline#extensions#whitespace#skip_indent_check_ft', {}), 'force')
                            
  398              0.002019   if !exists('b:airline_whitespace_check')
    2              0.000006     let b:airline_whitespace_check = ''
    2              0.000016     let checks = get(b:, 'airline_whitespace_checks', get(g:, 'airline#extensions#whitespace#checks', s:default_checks))
                            
    2              0.000004     let trailing = 0
    2              0.000004     let check = 'trailing'
    2              0.000023     if index(checks, check) > -1 && index(get(skip_check_ft, &ft, []), check) < 0
    2              0.000003       try
    2              0.000010         let regexp = get(g:, 'airline#extensions#whitespace#trailing_regexp', '\s$')
    2              0.005077         let trailing = search(regexp, 'nw')
                                  catch
                                    call airline#util#warning(printf('Whitespace: error occurred evaluating "%s"', regexp))
                                    echomsg v:exception
                                    return ''
    2              0.000004       endtry
    2              0.000002     endif
                            
    2              0.000005     let mixed = 0
    2              0.000003     let check = 'indent'
    2              0.000019     if index(checks, check) > -1 && index(get(skip_check_ft, &ft, []), check) < 0
    2   0.008696   0.000025       let mixed = s:check_mixed_indent()
    2              0.000004     endif
                            
    2              0.000004     let mixed_file = ''
    2              0.000004     let check = 'mixed-indent-file'
    2              0.000032     if index(checks, check) > -1 && index(get(skip_check_ft, &ft, []), check) < 0
    2   0.000490   0.000023       let mixed_file = s:check_mixed_indent_file()
    2              0.000001     endif
                            
    2              0.000003     let long = 0
    2              0.000006     if index(checks, 'long') > -1 && &tw > 0
                                  let long = search('\%>'.&tw.'v.\+', 'nw')
    2              0.000002     endif
                            
    2              0.000003     let conflicts = 0
    2              0.000004     if index(checks, 'conflicts') > -1
    2   0.000874   0.000018       let conflicts = s:conflict_marker()
    2              0.000001     endif
                            
    2              0.000009     if trailing != 0 || mixed != 0 || long != 0 || !empty(mixed_file) || conflicts != 0
    1              0.000003       let b:airline_whitespace_check = s:symbol
    1              0.000004       if strlen(s:symbol) > 0
    1              0.000003         let space = (g:airline_symbols.space)
                                  else
                                    let space = ''
    1              0.000000       endif
                            
    1              0.000001       if s:show_message
    1              0.000002         if trailing != 0
    1              0.000004           let trailing_fmt = get(g:, 'airline#extensions#whitespace#trailing_format', '[%s]trailing')
    1              0.000010           let b:airline_whitespace_check .= space.printf(trailing_fmt, trailing)
    1              0.000001         endif
    1              0.000001         if mixed != 0
                                      let mixed_indent_fmt = get(g:, 'airline#extensions#whitespace#mixed_indent_format', '[%s]mixed-indent')
                                      let b:airline_whitespace_check .= space.printf(mixed_indent_fmt, mixed)
    1              0.000001         endif
    1              0.000001         if long != 0
                                      let long_fmt = get(g:, 'airline#extensions#whitespace#long_format', '[%s]long')
                                      let b:airline_whitespace_check .= space.printf(long_fmt, long)
    1              0.000000         endif
    1              0.000003         if !empty(mixed_file)
                                      let mixed_indent_file_fmt = get(g:, 'airline#extensions#whitespace#mixed_indent_file_format', '[%s]mix-indent-file')
                                      let b:airline_whitespace_check .= space.printf(mixed_indent_file_fmt, mixed_file)
    1              0.000001         endif
    1              0.000002         if conflicts != 0
                                      let conflicts_fmt = get(g:, 'airline#extensions#whitespace#conflicts_format', '[%s]conflicts')
                                      let b:airline_whitespace_check .= space.printf(conflicts_fmt, conflicts)
    1              0.000001         endif
    1              0.000000       endif
    2              0.000001     endif
  398              0.000383   endif
  398   0.021713   0.004767   return airline#util#shorten(b:airline_whitespace_check, 120, 9)

FUNCTION  <SNR>50_CursorHoldUpdate()
    Defined: ~/.vim/plugged/vim-devicons/plugin/webdevicons.vim:397
Called 9 times
Total time:   0.001187
 Self time:   0.000254

count  total (s)   self (s)
    9              0.000059   if g:NERDTreeUpdateOnCursorHold != 1 || g:NERDTreeGitStatusUpdateOnCursorHold != 1
                                return
    9              0.000013   endif
                            
    9   0.001055   0.000122   if !exists('g:NERDTree') || !g:NERDTree.IsOpen()
    9              0.000014     return
                              endif
                            
                              " Do not update when a special buffer is selected
                              if !empty(&l:buftype)
                                return
                              endif
                            
                              " winnr need to make focus go to opened file
                              " CursorToTreeWin needed to avoid error on opening file
                              let l:winnr = winnr()
                              let l:altwinnr = winnr('#')
                            
                              call g:NERDTree.CursorToTreeWin()
                              call b:NERDTree.root.refreshFlags()
                              call NERDTreeRender()
                            
                              exec l:altwinnr . 'wincmd w'
                              exec l:winnr . 'wincmd w'

FUNCTION  coc#_cancel()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc.vim:102
Called 80 times
Total time:   0.004091
 Self time:   0.002177

count  total (s)   self (s)
                              " hack for close pum
   80              0.000374   if pumvisible()
   12              0.000190     let g:coc#_context = {'start': 0, 'preselect': -1,'candidates': []}
   12              0.000179     call feedkeys("\<Plug>CocRefresh", 'i')
   12   0.002042   0.000128     call coc#rpc#notify('stopCompletion', [])
   80              0.000137   endif

FUNCTION  airline#extensions#hunks#get_raw_hunks()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim:76
Called 398 times
Total time:   0.032297
 Self time:   0.026476

count  total (s)   self (s)
  398              0.003050   if !exists('b:source_func') || get(b:, 'source_func', '') is# 's:get_hunks_empty'
  398              0.001795     if get(g:, 'loaded_signify') && sy#buffer_is_active()
                                  let b:source_func = 's:get_hunks_signify'
  398              0.001842     elseif exists('*GitGutterGetHunkSummary')
                                  let b:source_func = 's:get_hunks_gitgutter'
  398              0.001383     elseif exists('*changes#GetStats')
                                  let b:source_func = 's:get_hunks_changes'
  398              0.001592     elseif exists('*quickfixsigns#vcsdiff#GetHunkSummary')
                                  let b:source_func = 'quickfixsigns#vcsdiff#GetHunkSummary'
  398   0.009270   0.004401     elseif s:coc_git_enabled()
                                  let b:source_func = 's:get_hunks_coc'
  398              0.000385     else
  398              0.001019       let b:source_func = 's:get_hunks_empty'
  398              0.000382     endif
  398              0.000332   endif
  398   0.006050   0.005098   return {b:source_func}()

FUNCTION  airline#extensions#tabline#formatters#default#wrap_name()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim:33
Called 96 times
Total time:   0.005706
 Self time:   0.005706

count  total (s)   self (s)
   96              0.000842   let buf_nr_format = get(g:, 'airline#extensions#tabline#buffer_nr_format', '%s: ')
   96              0.000533   let buf_nr_show = get(g:, 'airline#extensions#tabline#buffer_nr_show', 0)
   96              0.000448   let buf_modified_symbol = g:airline_symbols.modified
                            
   96              0.000404   let _ = buf_nr_show ? printf(buf_nr_format, a:bufnr) : ''
   96              0.001402   let _ .= substitute(a:buffer_name, '\\', '/', 'g')
                            
   96              0.000640   if getbufvar(a:bufnr, '&modified') == 1
   96              0.000291     let _ .= buf_modified_symbol
   96              0.000105   endif
   96              0.000188   return _

FUNCTION  airline#highlighter#highlight_modified_inactive()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:223
Called 18 times
Total time:   0.000674
 Self time:   0.000674

count  total (s)   self (s)
   18              0.000118   if getbufvar(a:bufnr, '&modified')
   18              0.000231     let colors = exists('g:airline#themes#{g:airline_theme}#palette.inactive_modified.airline_c') ? g:airline#themes#{g:airline_theme}#palette.inactive_modified.airline_c : []
                              else
                                let colors = exists('g:airline#themes#{g:airline_theme}#palette.inactive.airline_c') ? g:airline#themes#{g:airline_theme}#palette.inactive.airline_c : []
   18              0.000023   endif
                            
   18              0.000049   if !empty(colors)
                                call airline#highlighter#exec('airline_c'.(a:bufnr).'_inactive', colors)
   18              0.000017   endif

FUNCTION  <SNR>79_is_function_definition()
    Defined: /usr/share/vim/vim82/indent/sh.vim:195
Called 10 times
Total time:   0.000260
 Self time:   0.000260

count  total (s)   self (s)
   10              0.000247   return a:line =~ '^\s*\<\k\+\>\s*()\s*{' || a:line =~ '^\s*{' || a:line =~ '^\s*function\s*\k\+\s*\%(()\)\?\s*{'

FUNCTION  airline#extensions#tabline#group_of_bufnr()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim:232
Called 3 times
Total time:   0.000141
 Self time:   0.000141

count  total (s)   self (s)
    3              0.000019   let cur = bufnr('%')
    3              0.000008   if cur == a:bufnr
    3              0.000025     if g:airline_detect_modified && getbufvar(a:bufnr, '&modified')
    3              0.000010       let group = 'airline_tabmod'
                                else
                                  let group = 'airline_tabsel'
    3              0.000004     endif
                              else
                                if g:airline_detect_modified && getbufvar(a:bufnr, '&modified')
                                  let group = 'airline_tabmod_unsel'
                                elseif index(a:tab_bufs, a:bufnr) > -1
                                  let group = 'airline_tab'
                                else
                                  let group = 'airline_tabhid'
                                endif
    3              0.000004   endif
    3              0.000005   return group

FUNCTION  airline#extensions#get_loaded_extensions()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions.vim:499
Called 398 times
Total time:   0.001585
 Self time:   0.001585

count  total (s)   self (s)
  398              0.001239   return s:loaded_ext

FUNCTION  <SNR>90_check_mixed_indent_file()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim:34
Called 2 times
Total time:   0.000467
 Self time:   0.000467

count  total (s)   self (s)
    2              0.000019   let c_like_langs = get(g:, 'airline#extensions#c_like_langs', [ 'arduino', 'c', 'cpp', 'cuda', 'go', 'javascript', 'ld', 'php' ])
    2              0.000009   if index(c_like_langs, &ft) > -1
                                " for C-like languages: allow /** */ comment style with one space before the '*'
                                let head_spc = '\v(^ +\*@!)'
    2              0.000002   else
    2              0.000004     let head_spc = '\v(^ +)'
    2              0.000001   endif
    2              0.000301   let indent_tabs = search('\v(^\t+)', 'nw')
    2              0.000109   let indent_spc  = search(head_spc, 'nw')
    2              0.000003   if indent_tabs > 0 && indent_spc > 0
                                return printf("%d:%d", indent_tabs, indent_spc)
    2              0.000001   else
    2              0.000002     return ''
                              endif

FUNCTION  airline#builder#get_next_group()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:49
Called 1 time
Total time:   0.000048
 Self time:   0.000048

count  total (s)   self (s)
    1              0.000004   let x = a:i + 1
    1              0.000006   let l = len(a:sections)
    2              0.000004   while x < l
    2              0.000013     let group = a:sections[x][0]
    2              0.000007     if group != '' && group != '|'
    1              0.000002       return group
    1              0.000002     endif
    1              0.000003     let x = x + 1
    1              0.000001   endwhile
                              return ''

FUNCTION  airline#parts#ffenc()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:108
Called 398 times
Total time:   0.022582
 Self time:   0.022582

count  total (s)   self (s)
  398              0.002044   let expected = get(g:, 'airline#parts#ffenc#skip_expected_string', '')
  398              0.001321   let bomb     = &bomb ? '[BOM]' : ''
  398              0.005702   let noeolf   = &eol ? '' : '[!EOL]'
  398              0.005493   let ff       = strlen(&ff) ? '['.&ff.']' : ''
  398              0.003331   if expected is# &fenc.bomb.noeolf.ff
                                return ''
  398              0.000364   else
  398              0.002636     return &fenc.bomb.noeolf.ff
                              endif

FUNCTION  <SNR>79_is_comment()
    Defined: /usr/share/vim/vim82/indent/sh.vim:290
Called 8 times
Total time:   0.000069
 Self time:   0.000069

count  total (s)   self (s)
    8              0.000056   return a:line =~ '^\s*#'

FUNCTION  airline#util#ignore_buf()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:136
Called 398 times
Total time:   0.016568
 Self time:   0.016568

count  total (s)   self (s)
  398              0.004496   let pat = '\c\v'. get(g:, 'airline#ignore_bufadd_pat', ''). get(g:, 'airline#extensions#tabline#ignore_bufadd_pat',  '!|defx|gundo|nerd_tree|startify|tagbar|term://|undotree|vimfiler')
  398              0.011159   return match(a:name, pat) > -1

FUNCTION  airline#parts#paste()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:63
Called 398 times
Total time:   0.001844
 Self time:   0.001844

count  total (s)   self (s)
  398              0.001593   return g:airline_detect_paste && &paste ? g:airline_symbols.paste : ''

FUNCTION  airline#builder#get_prev_group()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:37
Called 10 times
Total time:   0.000196
 Self time:   0.000196

count  total (s)   self (s)
   10              0.000032   let x = a:i - 1
   12              0.000024   while x >= 0
    9              0.000037     let group = a:sections[x][0]
    9              0.000024     if group != '' && group != '|'
    7              0.000010       return group
    2              0.000003     endif
    2              0.000005     let x = x - 1
    5              0.000008   endwhile
    3              0.000005   return ''

FUNCTION  WebDevIconsGetFileTypeSymbol()
    Defined: ~/.vim/plugged/vim-devicons/plugin/webdevicons.vim:491
Called 96 times
Total time:   0.028547
 Self time:   0.027149

count  total (s)   self (s)
   96              0.000239   if a:0 == 0
                                let fileNodeExtension = expand('%:e')
                                let fileNode = expand('%:t')
                                let isDirectory = 0
   96              0.000121   else
   96              0.000718     let fileNodeExtension = fnamemodify(a:1, ':e')
   96              0.000481     let fileNode = fnamemodify(a:1, ':t')
   96              0.000225     if a:0 > 1
                                  let isDirectory = a:2
   96              0.000101     else
   96              0.000210       let isDirectory = 0
   96              0.000105     endif
   96              0.000091   endif
                            
   96              0.000245   if isDirectory == 0 || g:DevIconsEnableFolderPatternMatching
                            
   96              0.000338     let symbol = g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol
   96              0.000494     let fileNodeExtension = tolower(fileNodeExtension)
   96              0.000355     let fileNode = tolower(fileNode)
                            
  960              0.003702     for [pattern, glyph] in items(g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols)
  864              0.007811       if match(fileNode, pattern) != -1
                                    let symbol = glyph
                                    break
  864              0.000746       endif
  960              0.000989     endfor
                            
   96              0.000377     if symbol == g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol
   96              0.000510       if has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, fileNode)
                                    let symbol = g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[fileNode]
   96              0.000742       elseif ((isDirectory == 1 && g:DevIconsEnableFolderExtensionPatternMatching) || isDirectory == 0) && has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, fileNodeExtension)
                                    let symbol = g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[fileNodeExtension]
   96              0.000159       elseif isDirectory == 1
                                    let symbol = g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol
   96              0.000084       endif
   96              0.000085     endif
                            
                              else
                                let symbol = g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol
   96              0.000092   endif
                            
   96   0.003356   0.001958   let artifactFix = s:DevIconsGetArtifactFix()
                            
   96              0.000239   return symbol . artifactFix
                            

FUNCTION  airline#parts#get()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:49
Called 398 times
Total time:   0.002638
 Self time:   0.002638

count  total (s)   self (s)
  398              0.002359   return get(s:parts, a:key, {})

FUNCTION  <SNR>103_get_separator_change_with_end()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim:76
Called 2 times
Total time:   0.000719
 Self time:   0.000093

count  total (s)   self (s)
    2              0.000006   let sep_change = 0
    2              0.000009   if !empty(a:new_end_group) " Separator between title and the end
    1   0.000647   0.000021     let sep_change += airline#builder#should_change_group(a:new_group, a:new_end_group) ? a:sep_size : a:alt_sep_size
    2              0.000004   endif
    2              0.000007   if !empty(a:old_group) " Separator between the title and the one adjacent
                                let sep_change += airline#builder#should_change_group(a:new_group, a:old_group) ? a:sep_size : a:alt_sep_size
                                if !empty(a:old_end_group) " Remove mis-predicted separator
                                  let sep_change -= airline#builder#should_change_group(a:old_group, a:old_end_group) ? a:sep_size : a:alt_sep_size
                                endif
    2              0.000002   endif
    2              0.000005   return sep_change

FUNCTION  airline#parts#readonly()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:89
Called 398 times
Total time:   0.030585
 Self time:   0.014017

count  total (s)   self (s)
                              " only consider regular buffers (e.g. ones that represent actual files,
                              " but not special ones like e.g. NERDTree)
  398   0.024615   0.008047   if !empty(&buftype) || airline#util#ignore_buf(bufname('%'))
                                return ''
  398              0.000395   endif
  398              0.001476   if &readonly && !filereadable(bufname('%'))
                                return '[noperm]'
  398              0.000370   else
  398              0.001118     return &readonly ? g:airline_symbols.readonly : ''
                              endif

FUNCTION  <SNR>86_group_not_done()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:26
Called 486 times
Total time:   0.004742
 Self time:   0.004742

count  total (s)   self (s)
  486              0.001904   if index(a:list, a:name) == -1
  486              0.001709     call add(a:list, a:name)
  486              0.000692     return 1
                              else
                                if &vbs
                                  echomsg printf("airline: group: %s already done, skipping", a:name)
                                endif
                                return 0
                              endif

FUNCTION  airline#builder#should_change_group()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:130
Called 4 times
Total time:   0.001900
 Self time:   0.000161

count  total (s)   self (s)
    4              0.000012   if a:group1 == a:group2
                                return 0
    4              0.000005   endif
    4   0.000948   0.000046   let color1 = airline#highlighter#get_highlight(a:group1)
    4   0.000894   0.000057   let color2 = airline#highlighter#get_highlight(a:group2)
    4              0.000030   return color1[1] != color2[1] || color1[0] != color2[0] ||  color1[2] != color2[2] || color1[3] != color2[3]

FUNCTION  <SNR>44_Autocmd()
    Defined: ~/.vim/plugged/coc.nvim/plugin/coc.vim:231
Called 956 times
Total time:   0.182793
 Self time:   0.023864

count  total (s)   self (s)
  956              0.004852   if !g:coc_workspace_initialized
                                return
  956              0.001587   endif
  956   0.171567   0.012638   call coc#rpc#notify('CocAutocmd', a:000)

FUNCTION  <SNR>88_get_hunks_empty()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim:72
Called 398 times
Total time:   0.000952
 Self time:   0.000952

count  total (s)   self (s)
  398              0.000648   return ''

FUNCTION  <SNR>88_coc_git_enabled()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim:18
Called 398 times
Total time:   0.004869
 Self time:   0.004869

count  total (s)   self (s)
  398              0.002914   if !exists("*CocAction") || !get(g:, 'airline#extensions#hunks#coc_git', 0)
                                 " coc-git extension is disabled by default
                                 " unless specifically being enabled by the user
                                 " (as requested from coc maintainer)
  398              0.000570     return 0
                              endif
                              return 1

FUNCTION  <SNR>99_get_accented_line()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:163
Called 7 times
Total time:   0.000396
 Self time:   0.000396

count  total (s)   self (s)
    7              0.000018   if a:self._context.active
                                " active window
    7              0.000015     let contents = []
    7              0.000070     let content_parts = split(a:contents, '__accent')
   10              0.000024     for cpart in content_parts
    3              0.000032       let accent = matchstr(cpart, '_\zs[^#]*\ze')
    3              0.000009       call add(contents, cpart)
   10              0.000016     endfor
    7              0.000033     let line = join(contents, a:group)
    7              0.000054     let line = substitute(line, '__restore__', a:group, 'g')
                              else
                                " inactive window
                                let line = substitute(a:contents, '%#__accent[^#]*#', '', 'g')
                                let line = substitute(line, '%#__restore__#', '', 'g')
    7              0.000008   endif
    7              0.000012   return line

FUNCTION  292()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:25
Called 1 time
Total time:   0.000006
 Self time:   0.000006

count  total (s)   self (s)
    1              0.000005   call insert(self._sections, [a:group, a:contents], a:position)

FUNCTION  <SNR>86_get_array()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:54
Called 1103 times
Total time:   0.007226
 Self time:   0.007226

count  total (s)   self (s)
 1103              0.006721   return [ a:guifg, a:guibg, a:ctermfg, a:ctermbg, empty(a:opts) ? '' : join(a:opts, ',') ]

FUNCTION  <SNR>79_is_array()
    Defined: /usr/share/vim/vim82/indent/sh.vim:201
Called 8 times
Total time:   0.000067
 Self time:   0.000067

count  total (s)   self (s)
    8              0.000057   return a:line =~ '^\s*\<\k\+\>=('

FUNCTION  coc#api#notify()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/api.vim:583
Called 168 times
Total time:   0.040411
 Self time:   0.007510

count  total (s)   self (s)
  168   0.039836   0.006935   call call(s:funcs[a:method], a:args)

FUNCTION  airline#highlighter#exec()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:102
Called 689 times
Total time:   0.202561
 Self time:   0.050874

count  total (s)   self (s)
  689              0.002293   if pumvisible()
                                return
  689              0.000534   endif
  689              0.001866   let colors = a:colors
  689              0.001045   if s:is_win32term
                                let colors[2] = s:gui2cui(get(colors, 0, ''), get(colors, 2, ''))
                                let colors[3] = s:gui2cui(get(colors, 1, ''), get(colors, 3, ''))
  689              0.000562   endif
  689   0.132137   0.006873   let old_hi = airline#highlighter#get_highlight(a:group)
  689              0.001667   if len(colors) == 4
  203              0.000543     call add(colors, '')
  689              0.000555   endif
  689              0.007257   let new_hi = [colors[0], colors[1], printf('%s', colors[2]), printf('%s', colors[3]), colors[4]]
  689   0.023581   0.005745   let colors = s:CheckDefined(colors)
  689   0.015248   0.006661   if old_hi != new_hi || !s:hl_group_exists(a:group)
                                let cmd = printf('hi %s%s', a:group, s:GetHiCmd(colors))
                                exe cmd
                                if has_key(s:hl_groups, a:group)
                                  let s:hl_groups[a:group] = colors
                                endif
  689              0.000475   endif

FUNCTION  airline#parts#spell()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:67
Called 398 times
Total time:   0.017701
 Self time:   0.017701

count  total (s)   self (s)
  398              0.009076   let spelllang = g:airline_detect_spelllang ? printf(" [%s]", toupper(substitute(&spelllang, ',', '/', 'g'))) : ''
  398              0.001066   if g:airline_detect_spell && &spell
                                let winwidth = airline#util#winwidth()
                                if winwidth >= 90
                                  return g:airline_symbols.spell . spelllang
                                elseif winwidth >= 70
                                  return g:airline_symbols.spell
                                else
                                  return split(g:airline_symbols.spell, '\zs')[0]
                                endif
  398              0.000332   endif
  398              0.000499   return ''

FUNCTION  coc#api#call()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/api.vim:572
Called 900 times
Total time:   0.190103
 Self time:   0.057915

count  total (s)   self (s)
  900              0.016693   let err = v:null
  900              0.002397   let res = v:null
  900              0.002540   try
  900   0.152942   0.020754     let res = call(s:funcs[a:method], a:args)
                              catch /.*/
                                let err = v:exception
  900              0.001984   endtry
  900              0.002671   return [err, res]

FUNCTION  <SNR>47_request()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/client.vim:148
Called 45 times
Total time:   0.165159
 Self time:   0.135176

count  total (s)   self (s)
   45   0.001162   0.000733   let channel = coc#client#get_channel(self)
   45              0.000325   if empty(channel) | return '' | endif
   45              0.000107   try
   45              0.000088     if s:is_vim
   45   0.158079   0.128525       let res = ch_evalexpr(channel, [a:method, a:args], {'timeout': 60 * 1000})
   45              0.000910       if type(res) == 1 && res ==# ''
                                    throw 'request '.a:method. ' '.string(a:args).' timeout after 60s'
   45              0.000135       endif
   45              0.000418       let [l:errmsg, res] =  res
   45              0.000260       if !empty(l:errmsg)
                                    throw l:errmsg
   45              0.000068       else
   45              0.000220         return res
                                  endif
                                else
                                  return call('rpcrequest', [channel, a:method] + a:args)
                                endif
                              catch /.*/
                                if v:exception =~# 'E475'
                                  if get(g:, 'coc_vim_leaving', 0) | return | endif
                                  echohl Error | echom '['.self.name.'] server connection lost' | echohl None
                                  let name = self.name
                                  call s:on_exit(name, 0)
                                  execute 'silent do User ConnectionLost'.toupper(name[0]).name[1:]
                                elseif v:exception =~# 'E12'
                                  " neovim's bug, ignore it
                                else
                                  echohl Error | echo 'Error on request ('.a:method.'): '.v:exception | echohl None
                                endif
   45              0.000105   endtry

FUNCTION  airline#parts#crypt()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:59
Called 398 times
Total time:   0.003420
 Self time:   0.003420

count  total (s)   self (s)
  398              0.003027   return g:airline_detect_crypt && exists("+key") && !empty(&key) ? g:airline_symbols.crypt : ''

FUNCTION  airline#extensions#keymap#status()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/keymap.vim:10
Called 398 times
Total time:   0.026654
 Self time:   0.026654

count  total (s)   self (s)
  398              0.006133   if (get(g:, 'airline#extensions#keymap#enabled', 1) && has('keymap'))
  398              0.002754     let short_codes = get(g:, 'airline#extensions#keymap#short_codes', {})
  398              0.002444     let label = get(g:, 'airline#extensions#keymap#label', g:airline_symbols.keymap)
  398              0.002034     let default = get(g:, 'airline#extensions#keymap#default', '')
  398              0.000829     if (label !=# '')
  398              0.001347       let label .= ' '
  398              0.000427     endif
  398              0.001017     let keymap = &keymap
  398              0.001583     if has_key(short_codes, keymap)
                                  let keymap = short_codes[keymap]
  398              0.000394     endif
  398              0.004610     return printf('%s', (!empty(keymap) && &iminsert ? (label . keymap) : (!empty(default) ? label . default : default)))
                              else
                                return ''
                              endif

FUNCTION  224()
    Defined: ~/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim:148
Called 9 times
Total time:   0.000830
 Self time:   0.000791

count  total (s)   self (s)
    9              0.000067     if exists('t:NERDTreeBufName')
                                    return bufwinnr(t:NERDTreeBufName)
    9              0.000012     endif
                            
                                " If WindowTree, there is no t:NERDTreeBufName variable. Search all windows.
   18              0.000145     for w in range(1,winnr('$'))
    9   0.000348   0.000309         if bufname(winbufnr(w)) =~# '^' . g:NERDTreeCreator.BufNamePrefix() . '\d\+$'
                                        return w
    9              0.000013         endif
   18              0.000036     endfor
                            
    9              0.000018     return -1

FUNCTION  225()
    Defined: ~/.vim/plugged/nerdtree/lib/nerdtree/nerdtree.vim:164
Called 9 times
Total time:   0.000933
 Self time:   0.000103

count  total (s)   self (s)
    9   0.000923   0.000093     return s:NERDTree.GetWinNum() !=# -1

FUNCTION  airline#parts#mode()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/parts.vim:55
Called 398 times
Total time:   0.028004
 Self time:   0.007108

count  total (s)   self (s)
  398   0.027604   0.006708   return airline#util#shorten(get(w:, 'airline_current_mode', ''), 79, 1)

FUNCTION  <SNR>66_Highlight_Matching_Pair()
    Defined: /usr/share/vim/vim82/plugin/matchparen.vim:39
Called 492 times
Total time:   0.078925
 Self time:   0.078925

count  total (s)   self (s)
                              " Remove any previous match.
  492              0.003150   if exists('w:paren_hl_on') && w:paren_hl_on
    8              0.000071     silent! call matchdelete(3)
    8              0.000029     let w:paren_hl_on = 0
  492              0.000590   endif
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
  492              0.003843   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
  492              0.000495   endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
  492              0.001883   let c_lnum = line('.')
  492              0.001722   let c_col = col('.')
  492              0.001144   let before = 0
                            
  492              0.002628   let text = getline(c_lnum)
  492              0.015211   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
  492              0.001574   if empty(matches)
                                let [c_before, c] = ['', '']
  492              0.000649   else
  492              0.003595     let [c_before, c] = matches[1:2]
  492              0.000672   endif
  492              0.011787   let plist = split(&matchpairs, '.\zs[:,]')
  492              0.002290   let i = index(plist, c)
  492              0.000949   if i < 0
                                " not found, in Insert mode try character before the cursor
  484              0.002929     if c_col > 1 && (mode() == 'i' || mode() == 'R')
  426              0.001966       let before = strlen(c_before)
  426              0.000956       let c = c_before
  426              0.001426       let i = index(plist, c)
  484              0.000611     endif
  484              0.000773     if i < 0
                                  " not found, nothing to do
  484              0.001003       return
                                endif
    8              0.000009   endif
                            
                              " Figure out the arguments for searchpairpos().
    8              0.000019   if i % 2 == 0
                                let s_flags = 'nW'
                                let c2 = plist[i + 1]
    8              0.000009   else
    8              0.000020     let s_flags = 'nbW'
    8              0.000020     let c2 = c
    8              0.000038     let c = plist[i - 1]
    8              0.000010   endif
    8              0.000018   if c == '['
                                let c = '\['
                                let c2 = '\]'
    8              0.000012   endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
    8              0.000076   if before > 0
                                let has_getcurpos = exists("*getcurpos")
                                if has_getcurpos
                                  " getcurpos() is more efficient but doesn't exist before 7.4.313.
                                  let save_cursor = getcurpos()
                                else
                                  let save_cursor = winsaveview()
                                endif
                                call cursor(c_lnum, c_col - before)
    8              0.000010   endif
                            
    8              0.000122   if !has("syntax") || !exists("g:syntax_on")
                                let s_skip = "0"
    8              0.000009   else
                                " Build an expression that detects whether the current cursor position is
                                " in certain syntax types (string, comment, etc.), for use as
                                " searchpairpos()'s skip argument.
                                " We match "escape" for special items, such as lispEscapeSpecial.
    8              0.000058     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|comment"''))'
                                " If executing the expression determines that the cursor is currently in
                                " one of the syntax types, then we want searchpairpos() to find the pair
                                " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                                " outside of the syntax types and s_skip should keep its value so we skip
                                " any matching pair inside the syntax types.
                                " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
    8              0.000014     try
    8              0.000862       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
                                catch /^Vim\%((\a\+)\)\=:E363/
                                  " We won't find anything, so skip searching, should keep Vim responsive.
                                  return
    8              0.000012     endtry
    8              0.000009   endif
                            
                              " Limit the search to lines visible in the window.
    8              0.000037   let stoplinebottom = line('w$')
    8              0.000037   let stoplinetop = line('w0')
    8              0.000016   if i % 2 == 0
                                let stopline = stoplinebottom
    8              0.000006   else
    8              0.000025     let stopline = stoplinetop
    8              0.000007   endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
    8              0.000041   if mode() == 'i' || mode() == 'R'
    6              0.000047     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
    2              0.000002   else
    2              0.000013     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
    8              0.000007   endif
    8              0.000008   try
    8              0.002193     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
    8              0.000012   endtry
                            
    8              0.000017   if before > 0
                                if has_getcurpos
                                  call setpos('.', save_cursor)
                                else
                                  call winrestview(save_cursor)
                                endif
    8              0.000008   endif
                            
                              " If a match is found setup match highlighting.
    8              0.000035   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
    8              0.000041     if exists('*matchaddpos')
    8              0.000369       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
                                else
                                  exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
    8              0.000009     endif
    8              0.000023     let w:paren_hl_on = 1
    8              0.000008   endif

FUNCTION  airline#util#strchars()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:119
Called 5 times
Total time:   0.000036
 Self time:   0.000036

count  total (s)   self (s)
    5              0.000015   if s:has_strchars
    5              0.000020     return strchars(a:str)
                              else
                                return strlen(substitute(a:str, '.', 'a', 'g'))
                              endif

FUNCTION  coc#_complete()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc.vim:56
Called 74 times
Total time:   1.216733
 Self time:   1.188257

count  total (s)   self (s)
   74              0.001018   let items = get(g:coc#_context, 'candidates', [])
   74              0.000401   let preselect = get(g:coc#_context, 'preselect', -1)
   74   1.213887   1.185411   call complete( g:coc#_context.start + 1, items)
   74              0.000433   if s:select_api && len(items) && preselect != -1
                                call nvim_select_popupmenu_item(preselect, v:false, v:false, {})
   74              0.000092   endif
   74              0.000117   return ''

FUNCTION  airline#highlighter#add_separator()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:214
Called 5 times
Total time:   0.004196
 Self time:   0.000108

count  total (s)   self (s)
    5              0.000038   let s:separators[a:from.a:to] = [a:from, a:to, a:inverse]
    5   0.004155   0.000067   call <sid>exec_separator({}, a:from, a:to, a:inverse, '')

FUNCTION  airline#extensions#tabline#builder#new()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim:227
Called 1 time
Total time:   0.000088
 Self time:   0.000035

count  total (s)   self (s)
    1   0.000069   0.000016   let builder = airline#builder#new(a:context)
    1              0.000004   let builder._build = builder.build
    1              0.000011   call extend(builder, s:prototype, 'force')
    1              0.000002   return builder

FUNCTION  <SNR>95_map_keys()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim:195
Called 95 times
Total time:   0.039373
 Self time:   0.039373

count  total (s)   self (s)
   95              0.000694   let bidx_mode = get(g:, 'airline#extensions#tabline#buffer_idx_mode', 1)
   95              0.000191   if bidx_mode > 0
   95              0.000156     if bidx_mode == 1
 1045              0.002463       for i in range(1, 10)
  950              0.028324         exe printf('noremap <silent> <Plug>AirlineSelectTab%d :call <SID>select_tab(%d)<CR>', i%10, i-1)
 1045              0.001405       endfor
                                else
                                  let start_idx = bidx_mode == 2 ? 11 : 1
                                  for i in range(start_idx, 99)
                                    exe printf('noremap <silent> <Plug>AirlineSelectTab%02d :call <SID>select_tab(%d)<CR>', i, i-start_idx)
                                  endfor
   95              0.000097     endif
   95              0.001903     noremap <silent> <Plug>AirlineSelectPrevTab :<C-u>call <SID>jump_to_tab(-v:count1)<CR>
   95              0.001620     noremap <silent> <Plug>AirlineSelectNextTab :<C-u>call <SID>jump_to_tab(v:count1)<CR>
                                " Enable this for debugging
                                " com! AirlineBufferList :echo map(copy(s:current_visible_buffers), {i,k -> k.": ".bufname(k)})
   95              0.000109   endif

FUNCTION  <SNR>53_on_window_changed()
    Defined: ~/.vim/plugged/vim-airline/plugin/airline.vim:51
Called 74 times
Total time:   0.007376
 Self time:   0.007376

count  total (s)   self (s)
                              " don't trigger for Vim popup windows
   74              0.000549   if &buftype is# 'popup'
                                return
   74              0.000083   endif
                            
   74              0.000431   if pumvisible() && (!&previewwindow || g:airline_exclude_preview)
                                " do not trigger for previewwindows
                                return
   74              0.000075   endif
   74              0.000469   let s:active_winnr = winnr()
                              " Handle each window only once, since we might come here several times for
                              " different autocommands.
   74              0.002240   let l:key = [bufnr('%'), s:active_winnr, winnr('$'), tabpagenr(), &ft]
   74              0.002510   if get(g:, 'airline_last_window_changed', []) == l:key && &stl is# '%!airline#statusline('.s:active_winnr.')' && &ft !~? 'gitcommit'
                                " fugitive is special, it changes names and filetypes several times,
                                " make sure the caching does not get into its way
   74              0.000115     return
                              endif
                              let g:airline_last_window_changed = l:key
                              call s:init()
                              call airline#update_statusline()

FUNCTION  <SNR>99_get_seperator()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:155
Called 3 times
Total time:   0.003849
 Self time:   0.000074

count  total (s)   self (s)
    3   0.001308   0.000034   if airline#builder#should_change_group(a:prev_group, a:group)
    3   0.002539   0.000038     return s:get_transitioned_seperator(a:self, a:prev_group, a:group, a:side)
                              else
                                return a:side ? a:self._context.left_alt_sep : a:self._context.right_alt_sep
                              endif

FUNCTION  <SNR>90_ws_refresh()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim:185
Called 9 times
Total time:   0.000157
 Self time:   0.000157

count  total (s)   self (s)
    9              0.000086   if get(b:, 'airline_ws_changedtick', 0) == b:changedtick
    7              0.000012     return
    2              0.000002   endif
    2              0.000010   unlet! b:airline_whitespace_check
    2              0.000010   if get(g:, 'airline_skip_empty_sections', 0)
                                exe ':AirlineRefresh!'
    2              0.000002   endif
    2              0.000009   let b:airline_ws_changedtick = b:changedtick

FUNCTION  airline#highlighter#get_highlight()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/highlighter.vim:62
Called 1103 times
Total time:   0.190432
 Self time:   0.081742

count  total (s)   self (s)
                              " only check for the cterm reverse attribute
                              " TODO: do we need to check all modes (gui, term, as well)?
 1103              0.006680   let reverse = synIDattr(synIDtrans(hlID(a:group)), 'reverse', 'cterm')
 1103              0.004568   if get(g:, 'airline_highlighting_cache', 0) && has_key(s:hl_groups, a:group)
                                let res = s:hl_groups[a:group]
                                return reverse ? [ res[1], res[0], res[3], res[2], res[4] ] : res
 1103              0.000908   else
 1103   0.034332   0.008425     let ctermfg = s:get_syn(a:group, 'fg', 'cterm')
 1103   0.033915   0.008037     let ctermbg = s:get_syn(a:group, 'bg', 'cterm')
 1103   0.033167   0.008005     let guifg = s:get_syn(a:group, 'fg', 'gui')
 1103   0.032326   0.007809     let guibg = s:get_syn(a:group, 'bg', 'gui')
 1103              0.005032     let bold = synIDattr(synIDtrans(hlID(a:group)), 'bold')
 1103              0.001328     if reverse
                                  let res = s:get_array(guibg, guifg, ctermbg, ctermfg, bold ? ['bold'] : a:000)
 1103              0.000981     else
 1103   0.017408   0.010182       let res = s:get_array(guifg, guibg, ctermfg, ctermbg, bold ? ['bold'] : a:000)
 1103              0.001499     endif
 1103              0.000723   endif
 1103              0.004018   let s:hl_groups[a:group] = res
 1103              0.001384   return res

FUNCTION  airline#util#shorten()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:28
Called 1194 times
Total time:   0.055108
 Self time:   0.035242

count  total (s)   self (s)
 1194   0.035667   0.015801   if airline#util#winwidth() < a:winwidth && len(split(a:text, '\zs')) > a:minwidth
                                if get(a:000, 0, 0)
                                  " shorten from tail
                                  return '…'.matchstr(a:text, '.\{'.a:minwidth.'}$')
                                else
                                  " shorten from beginning of string
                                  return matchstr(a:text, '^.\{'.a:minwidth.'}').'…'
                                endif
 1194              0.001015   else
 1194              0.001992     return a:text
                              endif

FUNCTION  <SNR>103_evaluate_tabline()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim:209
Called 5 times
Total time:   0.001089
 Self time:   0.000413

count  total (s)   self (s)
    5              0.000018   let tabline = a:tabline
    5   0.000772   0.000096   let tabline = substitute(tabline, '%{\([^}]\+\)}', '\=eval(submatch(1))', 'g')
    5              0.000073   let tabline = substitute(tabline, '%#[^#]\+#', '', 'g')
    5              0.000041   let tabline = substitute(tabline, '%(\([^)]\+\)%)', '\1', 'g')
    5              0.000036   let tabline = substitute(tabline, '%\d\+[TX]', '', 'g')
    5              0.000031   let tabline = substitute(tabline, '%=', '', 'g')
    5              0.000031   let tabline = substitute(tabline, '%\d*\*', '', 'g')
    5              0.000043   if has('tablineat')
                                let tabline = substitute(tabline, '%@[^@]\+@', '', 'g')
    5              0.000006   endif
    5              0.000010   return tabline

FUNCTION  288()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:8
Called 1 time
Total time:   0.000008
 Self time:   0.000008

count  total (s)   self (s)
    1              0.000007   call add(self._sections, ['|', a:0 ? a:1 : '%='])

FUNCTION  289()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:12
Called 1 time
Total time:   0.000027
 Self time:   0.000020

count  total (s)   self (s)
    1              0.000007   let spc = empty(a:contents) ? '' : g:airline_symbols.space
    1   0.000018   0.000011   call self.add_section(a:group, spc.a:contents.spc)

FUNCTION  coc#rpc#notify()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/rpc.vim:95
Called 968 times
Total time:   0.160843
 Self time:   0.030037

count  total (s)   self (s)
  968   0.025688   0.010335   if !coc#rpc#ready()
                                return ''
  968              0.000962   endif
  968   0.129064   0.013611   call s:client['notify'](a:method, a:args)
  968              0.002089   return ''

FUNCTION  <SNR>99_get_transitioned_seperator()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:140
Called 5 times
Total time:   0.004457
 Self time:   0.000261

count  total (s)   self (s)
    5              0.000011   let line = ''
    5              0.000035   if get(a:self._context, 'tabline', 0) && get(g:, 'airline#extensions#tabline#alt_sep', 0) && a:group ==# 'airline_tabsel' && a:side
                                call airline#highlighter#add_separator(a:prev_group, a:group, 0)
                                let line .= '%#'.a:prev_group.'_to_'.a:group.'#'
                                let line .=  a:self._context.right_sep.'%#'.a:group.'#'
    5              0.000005   else
    5   0.004260   0.000064     call airline#highlighter#add_separator(a:prev_group, a:group, a:side)
    5              0.000028     let line .= '%#'.a:prev_group.'_to_'.a:group.'#'
    5              0.000026     let line .= a:side ? a:self._context.left_sep : a:self._context.right_sep
    5              0.000016     let line .= '%#'.a:group.'#'
    5              0.000003   endif
    5              0.000011   return line

FUNCTION  airline#extensions#hunks#get_hunks()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim:95
Called 398 times
Total time:   0.096868
 Self time:   0.052479

count  total (s)   self (s)
  398              0.001865   if !get(w:, 'airline_active', 0)
                                return ''
  398              0.000368   endif
                              " Cache values, so that it isn't called too often
  398   0.011215   0.009393   if exists("b:airline_hunks") && get(b:,  'airline_changenr', 0) == b:changedtick && airline#util#winwidth() == get(s:, 'airline_winwidth', 0) && get(b:, 'source_func', '') isnot# 's:get_hunks_signify' && get(b:, 'source_func', '') isnot# 's:get_hunks_gitgutter' && get(b:, 'source_func', '') isnot# 's:get_hunks_empty' && get(b:, 'source_func', '') isnot# 's:get_hunks_changes' && get(b:, 'source_func', '') isnot# 's:get_hunks_coc'
                                return b:airline_hunks
  398              0.000377   endif
  398   0.037556   0.005259   let hunks = airline#extensions#hunks#get_raw_hunks()
  398              0.000683   let string = ''
  398   0.007252   0.004614   let winwidth = get(airline#parts#get('hunks'), 'minwidth', 100)
  398              0.001110   if !empty(hunks)
                                " hunks should contain [added, changed, deleted]
                                for i in [0, 1, 2]
                                  if (s:non_zero_only == 0 && airline#util#winwidth() > winwidth) || hunks[i] > 0
                                    let string .= printf('%s%s ', s:hunk_symbols[i], hunks[i])
                                  endif
                                endfor
  398              0.000576   endif
  398   0.010175   0.008590   if index(airline#extensions#get_loaded_extensions(), 'branch') == -1 && string[-1:] == ' '
                                " branch extension not loaded, skip trailing whitespace
                                let string = string[0:-2]
  398              0.000369   endif
                            
  398              0.001094   let b:airline_hunks = string
  398              0.001236   let b:airline_changenr = b:changedtick
  398   0.009887   0.003840   let s:airline_winwidth = airline#util#winwidth()
  398              0.000659   return string

FUNCTION  290()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:17
Called 3 times
Total time:   0.000024
 Self time:   0.000024

count  total (s)   self (s)
    3              0.000023   call add(self._sections, [a:group, a:contents])

FUNCTION  294()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:33
Called 1 time
Total time:   0.000006
 Self time:   0.000006

count  total (s)   self (s)
    1              0.000005   return len(self._sections)

FUNCTION  295()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:62
Called 2 times
Total time:   0.007857
 Self time:   0.001373

count  total (s)   self (s)
    2              0.000005   let side = 1
    2              0.000003   let line = ''
    2              0.000004   let i = 0
    2              0.000006   let length = len(self._sections)
    2              0.000003   let split = 0
    2              0.000005   let is_empty = 0
    2              0.000005   let prev_group = ''
                            
   11              0.000024   while i < length
    9              0.000033     let section = self._sections[i]
    9              0.000027     let group = section[0]
    9              0.000027     let contents = section[1]
    9              0.000019     let pgroup = prev_group
    9   0.000273   0.000104     let prev_group = airline#builder#get_prev_group(self._sections, i)
    9              0.000030     if group ==# 'airline_c' && &buftype ==# 'terminal' && self._context.active
                                  let group = 'airline_term'
    9              0.000036     elseif group ==# 'airline_c' && !self._context.active && has_key(self._context, 'bufnr')
                                  let group = 'airline_c'. self._context.bufnr
    9              0.000036     elseif prev_group ==# 'airline_c' && !self._context.active && has_key(self._context, 'bufnr')
                                  let prev_group = 'airline_c'. self._context.bufnr
    9              0.000008     endif
    9              0.000012     if is_empty
                                  let prev_group = pgroup
    9              0.000007     endif
    9   0.000206   0.000092     let is_empty = s:section_is_empty(self, contents)
                            
    9              0.000011     if is_empty
                                  " need to fix highlighting groups, since we
                                  " have skipped a section, we actually need
                                  " the previous previous group and so the
                                  " seperator goes from the previous previous group
                                  " to the current group
                                  let pgroup = group
    9              0.000007     endif
                            
    9              0.000015     if group == ''
                                  let line .= contents
    9              0.000016     elseif group == '|'
    2              0.000003       let side = 0
    2              0.000006       let line .= contents
    2              0.000003       let split = 1
    7              0.000008     else
    7              0.000013       if prev_group == ''
    2              0.000009         let line .= '%#'.group.'#'
    5              0.000007       elseif split
    2              0.000003         if !is_empty
    2   0.001987   0.000031           let line .= s:get_transitioned_seperator(self, prev_group, group, side)
    2              0.000001         endif
    2              0.000003         let split = 0
    3              0.000003       else
    3              0.000004         if !is_empty
    3   0.003885   0.000036           let line .= s:get_seperator(self, prev_group, group, side)
    3              0.000003         endif
    7              0.000010       endif
    7   0.000547   0.000151       let line .= is_empty ? '' : s:get_accented_line(self, group, contents)
    9              0.000009     endif
                            
    9              0.000026     let i = i + 1
   11              0.000018   endwhile
                            
    2              0.000003   if !self._context.active
                                "let line = substitute(line, '%#airline_c#', '%#airline_c'.self._context.bufnr.'#', '')
                                let line = substitute(line, '%#.\{-}\ze#', '\0_inactive', 'g')
    2              0.000002   endif
    2              0.000005   return line

FUNCTION  296()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim:18
Called 1 time
Total time:   0.000036
 Self time:   0.000030

count  total (s)   self (s)
    1              0.000005   let self._first_title = a:first " lowest index
    1              0.000003   let self._last_title = a:last " highest index
    1              0.000003   let self._left_title = a:current " next index to add on the left
    1              0.000005   let self._right_title = a:current + 1 " next index to add on the right
    1   0.000014   0.000008   let self._left_position = self.get_position() " left end of titles
    1              0.000003   let self._right_position = self._left_position " right end of the titles

FUNCTION  297()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim:41
Called 1 time
Total time:   0.001107
 Self time:   0.000064

count  total (s)   self (s)
    1   0.000256   0.000012   let title = self.get_title(a:index)
    1   0.000808   0.000015   let title_size = s:tabline_evaluated_length(title) + a:sep_size
    1              0.000002   if a:force || self._remaining_space >= title_size
    1              0.000001     let pos = a:pos
    1              0.000003     if has_key(self, "get_pretitle")
                                  call self.insert_raw(self.get_pretitle(a:index), pos)
                                  let self._right_position += 1
                                  let pos += 1
    1              0.000001     endif
                            
    1   0.000013   0.000007     call self.insert_section(a:group, title, pos)
    1              0.000002     let self._right_position += 1
    1              0.000001     let pos += 1
                            
    1              0.000002     if has_key(self, "get_posttitle")
                                  call self.insert_raw(self.get_posttitle(a:index), pos)
                                  let self._right_position += 1
                                  let pos += 1
    1              0.000001     endif
                            
    1              0.000002     let self._remaining_space -= title_size
    1              0.000001     return 1
                              endif
                              return 0

FUNCTION  298()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim:96
Called 1 time
Total time:   0.010756
 Self time:   0.000402

count  total (s)   self (s)
    1              0.000009   if has_key(self, '_left_position') && self._first_title <= self._last_title
    1   0.004635   0.000038     let self._remaining_space = &columns - s:tabline_evaluated_length(self._build())
                            
    1              0.000008     let center_active = get(g:, 'airline#extensions#tabline#center_active', 0)
                            
    1   0.000110   0.000017     let sep_size = s:tabline_evaluated_length(self._context.left_sep)
    1   0.000120   0.000033     let alt_sep_size = s:tabline_evaluated_length(self._context.left_alt_sep)
                            
    1   0.000043   0.000016     let outer_left_group = airline#builder#get_prev_group(self._sections, self._left_position)
    1   0.000065   0.000017     let outer_right_group = airline#builder#get_next_group(self._sections, self._right_position)
                            
    1              0.000010     let overflow_marker = get(g:, 'airline#extensions#tabline#overflow_marker', g:airline_symbols.ellipsis)
    1   0.000105   0.000016     let overflow_marker_size = s:tabline_evaluated_length(overflow_marker)
                                " Allow space for the markers before we begin filling in titles.
    1              0.000004     if self._left_title > self._first_title
                                  let self._remaining_space -= overflow_marker_size + s:get_separator_change(self.overflow_group, "", outer_left_group, sep_size, alt_sep_size)
    1              0.000001     endif
    1              0.000003     if self._left_title < self._last_title
                                  let self._remaining_space -= overflow_marker_size + s:get_separator_change(self.overflow_group, "", outer_right_group, sep_size, alt_sep_size)
    1              0.000002     endif
                            
                                " Add the current title
    1   0.000117   0.000012     let group = self.get_group(self._left_title)
    1              0.000003     if self._left_title == self._first_title
    1   0.000093   0.000018       let sep_change = s:get_separator_change(group, "", outer_left_group, sep_size, alt_sep_size)
                                else
                                  let sep_change = s:get_separator_change(group, "", self.overflow_group, sep_size, alt_sep_size)
    1              0.000001     endif
    1              0.000002     if self._left_title == self._last_title
    1   0.000714   0.000016       let sep_change += s:get_separator_change(group, "", outer_right_group, sep_size, alt_sep_size)
                                else
                                  let sep_change += s:get_separator_change(group, "", self.overflow_group, sep_size, alt_sep_size)
    1              0.000001     endif
    1              0.000003     let left_group = group
    1              0.000003     let right_group = group
    1   0.001123   0.000016     let self._left_title -= self.try_insert_title(self._left_title, group, self._left_position, sep_change, 1)
                            
    1              0.000004     if get(g:, 'airline#extensions#tabline#current_first', 0)
                                  " always have current title first
                                  let self._left_position += 1
    1              0.000000     endif
                            
    1              0.000002     if !center_active && self._right_title <= self._last_title
                                  " Add the title to the right
                                  let group = self.get_group(self._right_title)
                                  if self._right_title == self._last_title
                                    let sep_change = s:get_separator_change_with_end(group, right_group, outer_right_group, self.overflow_group, sep_size, alt_sep_size) - overflow_marker_size
                                  else
                                    let sep_change = s:get_separator_change(group, right_group, self.overflow_group, sep_size, alt_sep_size)
                                  endif
                                  let right_group = group
                                  let self._right_title += self.try_insert_title(self._right_title, group, self._right_position, sep_change, 1)
    1              0.000001     endif
                            
    1              0.000002     while self._remaining_space > 0
    1              0.000002       let done = 0
    1              0.000001       if self._left_title >= self._first_title
                                    " Insert next title to the left
                                    let group = self.get_group(self._left_title)
                                    if self._left_title == self._first_title
                                      let sep_change = s:get_separator_change_with_end(group, left_group, outer_left_group, self.overflow_group, sep_size, alt_sep_size) - overflow_marker_size
                                    else
                                      let sep_change = s:get_separator_change(group, left_group, self.overflow_group, sep_size, alt_sep_size)
                                    endif
                                    let left_group = group
                                    let done = self.try_insert_title(self._left_title, group, self._left_position, sep_change, 0)
                                    let self._left_title -= done
    1              0.000001       endif
                                  " If center_active is set, this |if| operates as an independent |if|,
                                  " otherwise as an |elif|.
    1              0.000002       if self._right_title <= self._last_title && (center_active || !done)
                                    " Insert next title to the right
                                    let group = self.get_group(self._right_title)
                                    if self._right_title == self._last_title
                                      let sep_change = s:get_separator_change_with_end(group, right_group, outer_right_group, self.overflow_group, sep_size, alt_sep_size) - overflow_marker_size
                                    else
                                      let sep_change = s:get_separator_change(group, right_group, self.overflow_group, sep_size, alt_sep_size)
                                    endif
                                    let right_group = group
                                    let done = self.try_insert_title(self._right_title, group, self._right_position, sep_change, 0)
                                    let self._right_title += done
    1              0.000001       endif
    1              0.000001       if !done
    1              0.000001         break
                                  endif
    1              0.000001     endwhile
                            
    1              0.000001     if self._left_title >= self._first_title
                                  if get(g:, 'airline#extensions#tabline#current_first', 0)
                                    let self._left_position -= 1
                                  endif
                                  call self.insert_section(self.overflow_group, overflow_marker, self._left_position)
                                  let self._right_position += 1
    1              0.000001     endif
                            
    1              0.000002     if self._right_title <= self._last_title
                                  call self.insert_section(self.overflow_group, overflow_marker, self._right_position)
    1              0.000001     endif
    1              0.000001   endif
                            
    1   0.003434   0.000006   return self._build()

FUNCTION  airline#util#prepend()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/util.vim:63
Called 1990 times
Total time:   0.019534
 Self time:   0.019534

count  total (s)   self (s)
 1990              0.005762   if a:minwidth > 0 && airline#util#winwidth() < a:minwidth
                                return ''
 1990              0.001686   endif
 1990              0.008045   return empty(a:text) ? '' : a:text.s:spc.g:airline_right_alt_sep.s:spc

FUNCTION  airline#extensions#tabline#add_tab_label()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim:260
Called 1 time
Total time:   0.000033
 Self time:   0.000033

count  total (s)   self (s)
    1              0.000007   let show_tab_count = get(g:, 'airline#extensions#tabline#show_tab_count', 1)
    1              0.000003   if show_tab_count == 2
                                call a:dict.add_section_spaced('airline_tabmod', printf('%s %d/%d', "tab", tabpagenr(), tabpagenr('$')))
    1              0.000005   elseif show_tab_count == 1 && tabpagenr('$') > 1
                                call a:dict.add_section_spaced('airline_tabmod', printf('%s %d/%d', "tab", tabpagenr(), tabpagenr('$')))
    1              0.000001   endif

FUNCTION  airline#builder#new()
    Defined: ~/.vim/plugged/vim-airline/autoload/airline/builder.vim:229
Called 1 time
Total time:   0.000053
 Self time:   0.000053

count  total (s)   self (s)
    1              0.000020   let builder = copy(s:prototype)
    1              0.000004   let builder._context = a:context
    1              0.000005   let builder._sections = []
                            
    1              0.000017   call extend(builder._context, { 'left_sep': g:airline_left_sep, 'left_alt_sep': g:airline_left_alt_sep, 'right_sep': g:airline_right_sep, 'right_alt_sep': g:airline_right_alt_sep, }, 'keep')
    1              0.000002   return builder

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
   74   1.216733   1.188257  coc#_complete()
  398   0.419355   0.077957  airline#check_mode()
   18   0.339319   0.057472  airline#highlighter#highlight()
  689   0.202561   0.050874  airline#highlighter#exec()
 1103   0.190432   0.081742  airline#highlighter#get_highlight()
  900   0.190103   0.057915  coc#api#call()
  956   0.182793   0.023864  <SNR>44_Autocmd()
   45   0.168238   0.002081  coc#rpc#request()
   45   0.165159   0.135176  <SNR>47_request()
  968   0.160843   0.030037  coc#rpc#notify()
  203   0.129811   0.010749  <SNR>86_exec_separator()
  968   0.115453   0.108053  <SNR>47_notify()
  398   0.103631   0.076691  airline#extensions#whitespace#check()
 4412   0.101464             <SNR>86_get_syn()
  398   0.096868   0.052479  airline#extensions#hunks#get_hunks()
  757   0.083962   0.016379  313()
  492   0.078925             <SNR>66_Highlight_Matching_Pair()
  406   0.067883   0.004454  airline#themes#get_highlight()
   95   0.065517   0.009385  airline#extensions#tabline#get()
  340   0.063051   0.029003  316()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
   74   1.216733   1.188257  coc#_complete()
   45   0.165159   0.135176  <SNR>47_request()
  968   0.115453   0.108053  <SNR>47_notify()
 4412              0.101464  <SNR>86_get_syn()
 1103   0.190432   0.081742  airline#highlighter#get_highlight()
  492              0.078925  <SNR>66_Highlight_Matching_Pair()
  398   0.419355   0.077957  airline#check_mode()
  398   0.103631   0.076691  airline#extensions#whitespace#check()
  364              0.059878  coc#util#get_buf_lines()
  900   0.190103   0.057915  coc#api#call()
   18   0.339319   0.057472  airline#highlighter#highlight()
  398   0.096868   0.052479  airline#extensions#hunks#get_hunks()
  689   0.202561   0.050874  airline#highlighter#exec()
 2786              0.042120  airline#util#append()
   95              0.039373  <SNR>95_map_keys()
 2510              0.038046  airline#util#winwidth()
 1194   0.055108   0.035242  airline#util#shorten()
   39              0.033465  coc#util#get_complete_option()
 3582   0.035447   0.030604  airline#util#wrap()
  968   0.160843   0.030037  coc#rpc#notify()

