#!/bin/bash

#-------------------=== configs ===-------------------------------
this_script=`basename "$0"`
my_bin="bin/"
local_bin="/usr/local/bin"
hashtag="#"     # needed for progress bar
installed_packages="apt_manual_list.txt"
lines_packages=`wc -l $installed_packages | awk '{ print $1 }'`
PPAs="ppa_list.txt"
lines_PPAs=`wc -l $PPAs | awk '{ print $1 }'`
declare -A files=(
    #["original_file_path"]="dotfiles_repo_copy"
    ["~/.config/nvim/init.vim"]="dotfiles/vim/nvim/init.vim"
    ["~/.vimrc"]="dotfiles/vim/vim/.vimrc"
    ["~/.bashrc"]="dotfiles/shell/.bashrc"
    # ["~/.config/kitty/kitty.conf"]="dotfiles/kitty/kitty.conf"
    ["~/.config/kitty"]="dotfiles/kitty/kitty"
    ["~/.config/noti"]="dotfiles/noti"
    ["~/.inputrc"]="dotfiles/user/.inputrc"
    ["~/.profile"]="dotfiles/user/.profile"
    ["~/.gitconfig"]="dotfiles/git/.gitconfig"
    ["~/.zshrc"]="dotfiles/shell/.zshrc"
)

declare -A fonts=(
    #["<font_name>"]="<link_to_ttf_file>"
    ["Hack_bold"]="https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/Hack/Bold/complete/Hack%20Bold%20Nerd%20Font%20Complete.ttf"
    ["Hack_bolditalic"]="https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/Hack/BoldItalic/complete/Hack%20Bold%20Italic%20Nerd%20Font%20Complete.ttf"
    ["Hack_italic"]="https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/Hack/Italic/complete/Hack%20Italic%20Nerd%20Font%20Complete.ttf"
    ["Hack_regular"]="https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/Hack/Regular/complete/Hack%20Regular%20Nerd%20Font%20Complete.ttf"
)


script_help=$( cat << EOF

This script installs all many utils, packages and configuration used on my daily programming
life.

Usages:
    #0: ${this_script} [arg]
Arguments:
    -h,--help                                   See this help message.
    -gl,--generate-list                         Create list of insatlled dependencies
    -iw,--install-wallpapers                    Download and install (2) wallpapers from i.imgur.com
    -cs,--create-semylinks                      Create semylinks of .dotfiles to their
                                                corresponding locations
    -iu,--install-utils,--install-utilities     Install utilities present on file generated by
                                                running ${this_script} --generate-list
    -uf,--update-files                          Update .dotfiles by cat-ting original ones (run
                                                only if needed)
EOF
)

#-------------------=== install_apps ===-------------------------------

declare -A apps2                                 ;   declare -a orders;
apps2[0"All!"]="install_all"                     ;   orders+=(0"All!")
apps2[1"Kotlin"]="install_klotlin"               ;   orders+=(1"Kotlin")
apps2[2"Java"]="install_java"                    ;   orders+=(2"Java")
apps2[3"Python"]="install_python"                ;   orders+=(3"Python")
apps2[4"Node.js"]="install_nodejs"               ;   orders+=(4"Node.js")
apps2[5"Font"]="install_font"                    ;   orders+=(5"Font")
apps2[6"Google"]="install_google"                ;   orders+=(6"Google")
apps2[7"Noti"]="install_noti"                    ;   orders+=(7"Noti")
apps2[8"Telegram"]="Telegram"                    ;   orders+=(8"Telegram")
apps2[9"MySql"]="install_mysql"                  ;   orders+=(9"MySql")
apps2[10"TLauncher"]="install_tlauncher"         ;   orders+=(10"TLauncher")
apps2[11"KVM"]="install_kvm"                     ;   orders+=(11"KVM")
apps2[12"btnx & btnx-config"]="install_btnx"     ;   orders+=(12"btnx & btnx-config")
apps2[13"Themes"]="install_themes"               ;   orders+=(13"Themes")

declare -A themes                                ;   declare -a orders_themes;
themes[0"Cursor"]="install_cursor"               ;   orders_themes+=(0"Cursor")


function install_theme() {
    :
}


function install_kotlin() {

    cmds=(
        "cd $HOME"
        "curl -s https://get.sdkman.io | bash"
        # "sudo $HOME/.sdkman/bin/sdkman-init.sh"
        "sdk install kotlin"    # default one
    )

    for cmd in "${cmds[@]}"; do
        eval $cmd
    done

    # https://aster.cloud/2019/05/28/how-to-install-run-kotlin-in-ubuntu/

}

function install_java() {

    cmds=(
        "sudo apt-get install openjdk-11-jdk"
        "sudo apt-get install openjdk-11-jre"
        "sudo apt-get install openjdk-8-jre"
        "sudo apt-get install openjdk-8-jdk"
    )

    #             for app in "${to_install_apps[@]}"; do
    for cmd in "${cmds[@]}"; do
        eval $cmd
    done

    # https://www.linode.com/docs/guides/how-to-install-openjdk-on-ubuntu-18-04/

}

function install_python() {

    cmds=(
        "sudo apt install software-properties-common"
        "sudo apt install python3.9"
    )

    for cmd in "${cmds[@]}"; do
        eval $cmd
    done

    # https://techstorm.io/python-3-9-how-to-install-on-ubuntu-20-10/
}

function install_nodejs() {

    cmds=(
        "sudo apt update"
        "sudo apt install apt-transport-https curl ca-certificates software-properties-common"
        "curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -"
        "sudo apt-get install -y nodejs"
    )

    for cmd in "${cmds[@]}"; do
        eval $cmd
    done

    # test it with
    # $ node -v
    # $ npm -v

    # https://techstorm.io/node-js-install-latest-node-js-and-npm-on-ubuntu-20-10/

}

function install_font() {

    fonts_banner="-------------------=== INSTALLING FONTS ===-------------------------------"
    # available system wide
    cmds=(
        "sudo apt-get install fonts-hack-ttf"
    )

    for cmd in "${cmds[@]}"; do
        eval $cmd
    done

    #available for terminal & user apps
    mkdir -p ~/.local/share/fonts
    cd ~/.local/share/fonts

    echo "$fonts_banner"
    counter=0
    for font in "${!fonts[@]}"; do
        echo -e "$dashes\n$counter) Downloading $font..."
        `wget ${fonts[$font]}`
        counter=$((counter+1))
    done

}

function install_google() {

    mkdir /tmp/ggl
    cd /tmp/ggl
    wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    sudo dpkg -i google-chrome-stable_current_amd64.deb
}

function install_noti() {

    cmds=(
        "cd /usr/local/bin/"
        "curl -L $(curl -s https://api.github.com/repos/variadico/noti/releases/latest | awk '/browser_download_url/ { print $2 }' | grep 'linux-amd64' | sed 's/"//g') | tar -xz"
    )

    for cmd in "${cmds[@]}"; do
        eval $cmd
    done

}

function install_telegram() {

    cmds=(
        # "sudo add-apt-repository ppa:atareao/telegram"
        "sudo apt update && sudo apt install telegram"
    )

    for cmd in "${cmds[@]}"; do
        eval $cmd
    done

}

function install_mysql() {

    cmds=(
        "sudo apt-get install -y mysql-server"
    )

    for cmd in "${cmds[@]}"; do
        eval $cmd
    done

}

function install_tlauncher() {

    cmds=(
        "cd ~/Downloads/"
        "mkdir ~/Downloads/Minecraft_1/"
        "wget -O ~/Downloads/Minecraft_1/TLauncher.zip https://tlauncher.org/jar"
        "unzip ~/Downloads/Minecraft_1/TLauncher.zip"
    )

    for cmd in "${cmds[@]}"; do
        eval $cmd
    done
}


function install_btnx() {

    cmds=(
        "sudo apt install libgtk2.0-dev"
        "sudo apt install libglade2-dev"
        "sudo apt install libdaemon-dev"
        "cd ~/Donwloads"
        "git clone https://github.com/cdobrich/btnx-config/"
        "cd btnx-config"
        "./configure"
        "make"
        "sudo make install"
        "cd ~/Donwloads"
        "git clone https://github.com/cdobrich/btnx"
        "cd btnx"
        "./configure"
        "make"
        "sudo make install"
    )

    for cmd in "${cmds[@]}"; do
        eval $cmd
    done
}

function install_kdenlive() {

    cmds=(
        # "sudo add-apt-repository ppa:kdenlive/kdenlive-stable"
        "sudo apt install kdenlive"
        "sudo apt-get install wget"
    )

    for cmd in "${cmds[@]}"; do
        eval $cmd
    done

}

function install_apps() {

    apps2_length="${#apps2[@]}"

    counter=0

    menu_banner="-------------------=== MENU ===-------------------"
    echo -e "$menu_banner"
    for key in "${!orders[@]}"; do
        just_txt=$(echo ${orders[$key]} | sed 's/[0-9]//g')
        echo -e "  $key) $just_txt"``

        counter=$((counter+1))
        # echo "counter = $counter"

        if [[ $counter = $apps2_length ]]; then
            read -p "Type here: " u_input

            counter0=0
            for key in "${!apps2[@]}"; do         # key = app

                just_nums=$(echo $key | sed 's/[^0-9]*//g')

                if [[ "$u_input" == "$just_nums" ]]; then
                    cmd1="${apps2[$key]}"
                    # echo -e "\ncmd1 = $cmd1"
                    eval "$cmd1"
                else
                    counter0=$((counter0+1))
                    if [[ $counter0 == $apps2_length ]]; then
                        echo -e "'$u_input' is not an option, try again...\n"
                        install_apps
                    else
                        continue
                    fi
                fi
            done
        else
            continue
        fi
    done

}

#-------------------=== install_apps ===-------------------------------


declare -A apps1                                 ;   declare -a orders1;
apps2[11"KVM"]="install_kvm"                     ;   orders+=(11"KVM")



#-------------------=== script ===-------------------------------

function permissions() {

    sudo chmod +w /usr/local/bin/
    sudo chmod +r /usr/local/bin/
}

function install_nvidia_drivers() {

    cmds=(
        # "sudo add-apt-repository ppa:graphics-drivers/ppa"
        "sudo apt install nvidia-driver-460"
    )

    for cmd in "${cmds[@]}"; do
        eval $cmd
    done


}

function icon_theme() {

    cd /usr/share/icons
    sudo git clone https://github.com/keeferrourke/la-capitaine-icon-theme.git
}


function ProgressBar() {    #progress bar indicator
    # Process data
        let _progress=(${1}*100/${2}*100)/100
        let _done=(${_progress}*4)/10
        let _left=40-$_done
    # Build progressbar string lengths
        _fill=$(printf "%${_done}s")
        _empty=$(printf "%${_left}s")

    # 1.2 Build progressbar strings and print the ProgressBar line
    # 1.2.1 Output example:                           
    # 1.2.1.1 Progress : [########################################] 100%
    printf "\rProgress : [${_fill// /$hashtag}${_empty// /-}] ${_progress}%%"
}

function add_ppas() {

    read -t 10 -n 1 -s -r -p "'${lines_PPAs}' PPA pkgs will be added, press any key to continue..."

    counter=1

    echo -e "\n\n\n###########################################################\n\n"

    while read ppa; do
        echo "💡----------Checking if $ppa is already added..."

        if ! grep -q "^deb .*$ppa" /etc/apt/sources.list /etc/apt/sources.list.d/*; then
            # commands to add the ppa...
            echo "💡----------$ppa is not added. Adding it now..."
            `sudo add-apt-repository ppa:$ppa`
            echo -e "\n🎉'$ppa' was successfully added!🎉\n\n"
        else
            echo "💡----------$ppa is already added. Skipping it..."
        fi

        ProgressBar ${counter} ${lines_PPAs}
        echo -e "\n"

        counter=$((counter+1))
    done < $PPAs

    echo ""
}

function add_main_repos() {

    # there are 4 main
        # 1. main
        # 2. universe
        # 3. restricted
        # 4. multiverse

    sudo add-apt-repository main
    sudo add-apt-repository universe
    sudo add-apt-repository multiverse
    sudo add-apt-repository restricted
}

function install_wallpapers() {

    # https://imgur.com/a/3jVHdiP
    mkdir $HOME/Pictures/Wallpapers
    wget -O "$HOME/Pictures/Wallpapers/astronaut_and_scruff.jpg" https://i.imgur.com/8fkBMmG.jpg
    wget -O "$HOME/Pictures/Wallpapers/rocketing.jpg" https://i.imgur.com/A0ZjWqM.jpg

    $(gsettings set org.gnome.desktop.background picture-uri file:///$HOME/Pictures/Wallpapers/astronaut_and_scruff.jpg)
}


function update_files() {   #updates .dotfiles cat-ting current ones into the ones in the local repo

    _end="${#files[@]}"
    counter=1

    for key in ${!files[@]}; do
        # sleep 0.1
        cat_it="cat ${key} > ${files[${key}]}"
        eval $cat_it
        ProgressBar ${counter} ${_end}
        counter=$((counter+1))
    done

    echo ""

    # `cat ~/.vimrc > dotfiles/vim/.vimrc`; `cat ~/.config/nvim/init.vim > dotfiles/vim/init.vim`     #vim & nvim
    # `cat ~/.bashrc > dotfiles/shell/.bashrc`                                                        #.bashrc
    # `cat ~/.config/kitty/kitty.conf > dotfiles/kitty/kitty.conf`                                    #kitty
    # `cat ~/.inputrc > dotfiles/user/.inputrc`; `cat ~/.profile > dotfiles/user/.profile`            #user
}


function dotfiles_symlinks() {   #create semylink for the .dotfiles

    _end="${#files[@]}"
    counter=1

    for key in ${!files[@]}; do         # original file=$sm; final_dest=$key
        sm="`pwd`/${files[${key}]}"
        smc="ln -s $sm $key"
        echo "key = $key"
        if [[ -d "$key" ]]; then        # file exists and is a dir
            rm_original="rm -R $key"
        elif [[ -f "$key" ]]; then      # file exists and is a normal file
            rm_original="rm $key"
        else
            echo "file is neither a directory nor a normal file"
        fi
        echo -e "removing $key..."
        # eval $rm_original
        # echo -e "creating semylink of $sm into $key..."
        # eval $smc
        # ProgressBar ${counter} ${_end}
        # echo -e "\n"
        # counter=$((counter+1))
    done

    echo ""
}

function install_utils() {  #install the preconfigured list of files
    read -t 10 -n 1 -s -r -p "'${lines_packages}' utilities will be installed/upgraded, press any key to continue"

    counter=1

    echo -e "\n\n\n###########################################################\n\n"

    while read line; do
        echo "💡----------Installing: $line"
        ProgressBar ${counter} ${lines_packages}
        echo -e "\n"

        sudo apt-get install -y $line

        echo -e "\n🎉'$line' was successfully installed/upgraded!🎉\n\n"
        counter=$((counter+1))
    done < $installed_packages

    echo ""
}

function bin_symlinks() {

    origin_dir="`pwd`/bin"
    destination_dir="/usr/local/bin"

    cd $origin_dir

    for file in *; do
        orig_file="$origin_dir/$file"
        dest_file="$destination_dir/$file"

        # echo -e "Original File = $orig_file\nDestination File = $dest_file\n\n"
        `ln -s $orig_file $dest_file`
    done
}

if [[ -n "$1" ]]; then
    while (("$#")); do
        case "$1" in
            -h|--help)                                                          # stays
                echo "$script_help"; exit 0
                ;;
            -gl|--generate-list) #list installed packages into a file           # stays - done
                `apt-mark showmanual > $installed_packages`
                exit 0
                ;;
            -ds|--dotfiles-symlinks)                                             # stays - done
                dotfiles_symlinks
                exit 0
                ;;
            -ar|--add-repos|--add-repositories)                                 # stays - done
                add_main_repos
                exit 0
                ;;
            -bs|--bin-symlinks)                                                 # stays - done
                bin_symlinks
                exit 0
                ;;
            -gp|--give-permissions)
                permissions
                exit 0
                ;;
            -nd|--nvidia-drivers)
                install_nvidia_drivers
                exit 0
                ;;
            -ap|--add-ppas)
                add_ppas
                ;;
            -iw|--install-wallpapers)
                install_wallpapers
                exit 0
                ;;
            -iu|--install-utils|--install-utilities)                            # stays
                time_start=`date +%s`
                if [[ -f "$installed_packages" ]]; then
                    install_utils

                    time_end=`date +%s`
                    runtime=$((time_end-time_start))

                    case ${?} in
                        0)
                            echo -e "\n-----------------------------------------"
                            echo -e "Everything was installed/upgraded successfully!"
                            echo -e "Time: ${runtime}secs."
                            ;;
                        *)
                            echo -e "\n\nAn error ocurred while installing/upgrading some utility/utilities, check '$this_script --help' for help."
                            echo -e "Time: ${runtime}secs."
                            ;;
                    esac

                else
                    echo -e "File $installed_packages does not exists, make sure that you ran ./$this_script --generate-list first.\n"
                    exit 1
                fi

                exit 0
                ;;
            -uf|--update-files)                             # stays
                update_files

                case ${?} in
                    0)
                        echo -e "\nAll files where updated successfully!\n"
                        ;;
                    *)
                        echo -e "\nAn unknown error occurred while updating files. Please check that you have the appropriate permissions for viewing them\n"
                        exit 1
                        ;;
                esac

                exit 0
                ;;
            -ia|--install-apps)                                 # stays
                install_apps
                exit 0
                ;;
            *)
                echo -e "The give command '$1' was not recognized. Run ./$this_script --help to see which are the available commands\n"
                exit 1
                ;;
        esac
    done
else
    echo -e "This file needs at least one argument to execute. Run ./$this_script --help to see which are the available commands\n"
    exit 1
fi

